I"i1<h2 id="scala-method">Scala Method</h2>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">min</span><span class="o">(</span><span class="n">x</span> <span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
    <span class="nf">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span><span class="o">)</span> <span class="n">x</span> <span class="k">else</span> <span class="n">y</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이 메소드는 2개의 파라메터를 비교해서 작은 값을 리턴한다.</p>

<p>Scala의 모든 메소드는 <code class="highlighter-rouge">def</code> 키워드로 시작해야 하고, 그 다음에 메소드의 이름이 온다. 선택적으로 메소드에 파라미터를 전달하지 않거나 아무것도 리턴하지 않을 수 있다.</p>

<p>또한, Scala에서는 중괄호를 사용하지 않고 메소드를 정의할 수 있다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">min</span><span class="o">(</span><span class="n">x</span> <span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">:</span> <span class="kt">Int</span><span class="o">=</span> <span class="nf">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span><span class="o">)</span> <span class="n">x</span> <span class="k">else</span> <span class="n">y</span>
</code></pre></div></div>

<p>메소드에 코드 양이 적다면 위 메소드처럼 선언할 수 있다.</p>

<p>또한 필요한 파라미터를 메소드에 전달하지 않고 메소드 안에서 선언할 수 있다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">getPiValue</span><span class="o">()</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="mf">3.14159</span>
</code></pre></div></div>

<p>괄호가 있거나 없는 메소드는 부수효과의 유무를 의미한다. 위 메소드처럼 아래와 같이 중괄호를 사용하지 않을 수 있다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">getPiValue</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="mf">3.14159</span>
</code></pre></div></div>

<p>또한, 파라미터 타입을 명시적으로 언급해 값을 리턴하는 메소드도 있다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">Hello</span><span class="o">(</span><span class="n">word</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="s">"Hello"</span> <span class="o">+</span> <span class="n">word</span> <span class="o">+</span> <span class="s">"!"</span>
</code></pre></div></div>

<p>이 코드는 아래와 같이 사용할 수 있다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scala</span><span class="o">&gt;</span> <span class="k">def</span> <span class="nf">Hello</span><span class="o">(</span><span class="n">word</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="s">"Hello"</span> <span class="o">+</span> <span class="n">word</span> <span class="o">+</span> <span class="s">"!"</span>
<span class="nc">Hello</span><span class="k">:</span> <span class="o">(</span><span class="kt">word:</span> <span class="kt">String</span><span class="o">)</span><span class="kt">String</span>

<span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Hello</span><span class="o">(</span><span class="s">"Scala Test"</span><span class="o">)</span>
<span class="n">res1</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="nc">HelloScala</span> <span class="nc">Test</span><span class="o">!</span>

<span class="n">scala</span><span class="o">&gt;</span>
</code></pre></div></div>

<h3 id="scala-return">Scala Return</h3>

<p>Scala 메소드 구조</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def 함수이름 ([파라미터 목록]) : [return 타입] = {
  함수내용
  return 값
}
</code></pre></div></div>

<p>위에 min 함수를 이용해서 예시를 보여드리겠습니다. Scala 에서 return 키워드는 선택적이기 때문에 return 키워드가 없으면 마지막 할당 값을 리턴하게 설계됐다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scala</span><span class="o">&gt;</span> <span class="k">def</span> <span class="nf">min</span><span class="o">(</span><span class="n">x</span> <span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
     <span class="o">|</span>     <span class="nf">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span><span class="o">)</span> <span class="n">x</span> <span class="k">else</span> <span class="n">y</span>
     <span class="o">|</span> <span class="o">}</span>
<span class="n">min</span><span class="k">:</span> <span class="o">(</span><span class="kt">x:</span> <span class="kt">Int</span><span class="o">,</span> <span class="kt">y:</span> <span class="kt">Int</span><span class="o">)</span><span class="nc">Int</span>

<span class="n">scala</span><span class="o">&gt;</span> <span class="nf">min</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span>
<span class="n">res2</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">3</span>

<span class="n">scala</span><span class="o">&gt;</span>
</code></pre></div></div>

<h2 id="scala-class">Scala Class</h2>

<p>Scala의 클래스는 설계도로 간주되며, 실제로 메모리에 표현될 무언가를 생성하기 위해 해당 클래스를 인스턴스화한다. 클래스에 전체적으로 멤버라 불리는 메소드, 값, 변수, 타입, 오브젝트, 트레이트, 클래스를 포함할 수 있다.</p>

<p>다음 클래스의 예를 보여드리겠습니다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="k">var</span> <span class="nc">Name</span> <span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="kc">null</span>
    <span class="k">var</span> <span class="nc">Age</span> <span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">26</span>

    <span class="k">def</span> <span class="nf">setPersonName</span><span class="o">(</span><span class="n">value</span><span class="k">:</span> <span class="kt">String</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="py">Name</span> <span class="k">=</span> <span class="n">value</span>
    <span class="o">}</span>

    <span class="k">def</span> <span class="nf">setPersonAge</span><span class="o">(</span><span class="n">value</span><span class="k">:</span> <span class="kt">Int</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="py">Age</span> <span class="k">=</span> <span class="n">value</span>
    <span class="o">}</span>

    <span class="k">def</span> <span class="nf">getPersonName</span><span class="o">()</span> <span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="o">{</span>
        <span class="nc">Name</span>
    <span class="o">}</span>

    <span class="k">def</span> <span class="nf">getPersonAge</span><span class="o">()</span> <span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
        <span class="nc">Age</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위 클래스 코드는 Setter 와 Getter 라는 두 변수 Name, Age를 가지고있습니다. 이 클래스를 이용해서 몇가지 조작을 해보겠습니다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">object</span> <span class="nc">Person</span><span class="o">{</span>
    <span class="k">def</span> <span class="nf">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
        <span class="k">val</span> <span class="nv">Jack</span> <span class="k">:</span> <span class="kt">Person</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span>
        

        <span class="nv">Jack</span><span class="o">.</span><span class="py">setPersonName</span><span class="o">(</span><span class="s">"Jack"</span><span class="o">)</span>
        <span class="nf">println</span><span class="o">(</span><span class="nv">Jack</span><span class="o">.</span><span class="py">getPersonName</span><span class="o">())</span>
        <span class="nf">println</span><span class="o">(</span><span class="nv">Jack</span><span class="o">.</span><span class="py">getPersonAge</span><span class="o">())</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Result</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>scala HelloWorld.scala
Jack
26
</code></pre></div></div>

<h2 id="scala-object">Scala Object</h2>

<p>Scala의 객체는 기존 OOP 와 약간 다른 의미를 가지고있다. OOP에서 객체는 클래스의 인스턴스지만 scala에서 객체로 선언된 모든것은 인스턴스화할 수 없다.</p>

<p>Scala의 객체는 <code class="highlighter-rouge">object</code>가 키워드다. Scala에서 객체를 선언하는 기본 구문은 다음과 같다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>object &lt;식별자&gt; [extends &lt;식별자&gt;] [{필드, 메소드, 클래스}]
</code></pre></div></div>

<p>이 구문을 이해하기 위해 Hello World 프로그램을 다시 살펴보겠습니다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">object</span> <span class="nc">HelloWorld</span><span class="o">{</span>
    <span class="k">def</span> <span class="nf">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span><span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">]){</span>
        <span class="nf">println</span><span class="o">(</span><span class="s">"Hello World!"</span><span class="o">)</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이 HelloWorld에서 Java와의 가장 큰 차이점은 main 메소드가 클래스 내부가 아니라 오브젝트 내부에 있다는 점이다.</p>

<p>Scala에서 키워드 object는 다음과 같은 두 가지를 의미한다.</p>

<ol>
  <li>OOP처럼 오브젝트는 클래스의 인스턴스처럼 나타낼 수 있다.</li>
  <li>Singleton 이라는 매우 다른 타입의 인스턴스 객체를 나타내는 키워드다.</li>
</ol>

<p>Singleton 은 추후 다른 포스트에서 설명 드리겠습니다.</p>
:ET