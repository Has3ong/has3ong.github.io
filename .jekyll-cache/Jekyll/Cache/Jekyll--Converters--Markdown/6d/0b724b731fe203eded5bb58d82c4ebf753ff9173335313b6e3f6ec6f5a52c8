I"h<h2 id="generator">Generator</h2>

<p><strong>Generator(제네레이터)</strong>는 제네레이터 함수가 호출될 때 반환되는 iterator(이터레이터)의 일종이다. 제네레이터 함수는 일반적인 함수와 비슷하게 생겼지만 <code class="language-plaintext highlighter-rouge">yield</code> 구문을 사용해 데이터를 원하는 시점에 반환하고 처리를 다시 시작할 수 있다. 일반적인 함수는 진입점이 하나라면 제네레이터는 진입점이 여러개라고 생각할 수 있다. 이러한 특성때문에 제네레이터를 사용하면 원하는 시점에 원하는 데이터를 받을 수 있게된다.</p>

<blockquote>
  <p>Example</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; def generator():
...     yield 1
...     yield 'string'
...     yield True

&gt;&gt;&gt; gen = generator()
&gt;&gt;&gt; gen
&lt;generator object generator at 0x10a47c678&gt;
&gt;&gt;&gt; next(gen)
1
&gt;&gt;&gt; next(gen)
'string'
&gt;&gt;&gt; next(gen)
True
&gt;&gt;&gt; next(gen)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</code></pre></div></div>

<h3 id="동작">동작</h3>

<ol>
  <li>yield 문이 포함된 제네레이터 함수를 실행하면 제네레이터 객체가 반환되는데 이 때는 함수의 내용이 실행되지 않는다.</li>
  <li>next()라는 빌트인 메서드를 통해 제네레이터를 실행시킬 수 있으며 next() 메서드 내부적으로 iterator 를 인자로 받아 이터레이터의 <strong>next</strong>() 메서드를 실행시킨다.</li>
  <li>처음 <strong>next</strong>() 메서드를 호출하면 함수의 내용을 실행하다 yield 문을 만났을 때 처리를 중단한다.</li>
  <li>이 때 모든 local state 는 유지되는데 변수의 상태, 명령어 포인터, 내부 스택, 예외 처리 상태를 포함한다.</li>
  <li>그 후 제어권을 상위 컨텍스트로 양보(yield)하고 또 <strong>next</strong>()가 호출되면 제네레이터는 중단된 시점부터 다시 시작한다.</li>
</ol>

<p>yield 문의 값은 어떤 메서드를 통해 제네레이터가 다시 동작했는지에 따라 다른데, <strong>next</strong>()를 사용하면 None 이고 send()를 사용하면 메서드로 전달 된 값을 갖게되어 외부에서 데이터를 입력받을 수 있게 된다.</p>

<h3 id="장점">장점</h3>

<p>List, Set, Dict 표현식은 iterable(이터러블)하기에 for 표현식 등에서 유용하게 쓰일 수 있다. 이터러블 객체는 유용한 한편 모든 값을 메모리에 담고 있어야 하기 때문에 큰 값을 다룰 때는 별로 좋지 않다. 제네레이터를 사용하면 yield 를 통해 그때그때 필요한 값만을 받아 쓰기때문에 모든 값을 메모리에 들고 있을 필요가 없게된다.</p>

<p>range()함수는 Python 2.x 에서 리스트를 반환하고 Python 3.x 에선 range 객체를 반환한다. 이 range 객체는 제네레이터, 이터레이터가 아니다. 실제로 next(range(1))를 호출해보면 TypeError: ‘range’ object is not an iterator 오류가 발생한다. 그렇지만 내부 구현상 제네레이터를 사용한 것 처럼 메모리 사용에 있어 이점이 있다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; a = [i for i in range(100000)]
&gt;&gt;&gt; sys.getsizeof(a)
824464
&gt;&gt;&gt; b = (i for i in range(100000))
&gt;&gt;&gt; sys.getsizeof(b)
88
</code></pre></div></div>

<p>다만 제네레이터는 그때그때 필요한 값을 던져주고 기억하지는 않기 때문에 a 리스트가 여러번 사용될 수 있는 반면 b 제네레이터는 한번 사용된 후 소진된다. 이는 모든 이터레이터가 마찬가지인데 List, Set 은 이터러블하지만 이터레이터는 아니기에 소진되지 않는다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; len(list(b))
100000
&gt;&gt;&gt; len(list(b))
0
</code></pre></div></div>

<p>또한 while True 구문으로 제공받을 데이터가 무한하거나, 모든 값을 한번에 계산하기엔 시간이 많이 소요되어 그때 그때 필요한 만큼만 받아 계산하고 싶을 때 제네레이터를 활용할 수 있다.</p>

<h2 id="generator-iterator-iterable-간-관계">Generator, Iterator, Iterable 간 관계</h2>

<p><img src="https://user-images.githubusercontent.com/44635266/69629806-d057bc80-108f-11ea-8169-d31df0d40a79.png" alt="image" /></p>

<p><strong>Iterator</strong></p>

<p>객체 지향적 프로그래밍에서 배열이나 그와 유사한 자료 구조의 내부의 요소를 순회(traversing)하는 객체이다.</p>

<p><strong>Iterable</strong></p>

<p>리스트, Set, Dictionary와 같은 컬렉션이나 문자열과 같은 문자 Sequence 등은 for 문을 써서 하나씩 데이타를 처리할 수 있는데, 이렇게 하나 하나 처리할 수 있는 컬렉션이나 Sequence 들을 Iterable 객체(Iterable Object)라 부른다.</p>

:ET