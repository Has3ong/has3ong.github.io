I"uh<p><em>이 포스트는 <a href="https://github.com/Avkash/mldl/blob/master/pages/docs/books/confluent-kafka-definitive-guide-complete.pdf">Kafka Definitive Guide</a>를 바탕으로 작성하였습니다.</em></p>

<h2 id="rebalance-listeners">Rebalance Listeners</h2>

<p>앞 포스트에서는 오프셋과 커밋에 관해 설명했듯이, 컨슈머는 종료되기 전이나 파티션 리밸런싱이 시작되기 전에 클린업하는 처리를 해야합니다.</p>

<p>예를 들어, 컨슈머가 파티션의 소유권을 잃게 되는것을 알게 된다면, 처리했던 마지막 메세지의 오프셋을 커밋해야하며, 사용하던 파일 핸들, 데이터베이스 연결 등도 닫아야합니다. Kafka 에서는 <strong>ConsumerRebalanceListener</strong> 인터페이스를 구현하여 사용할 수 있습니다.</p>

<p>ConsumerRebalanceListener 에는 두 가지 메소드가 있습니다.</p>

<p>**public void onPartitionsRevoked(Collection<TopicPartition> partitions)**</TopicPartition></p>

<p>리밸런싱이 시작되기 전에, 컨슈머가 메세지 소비를 중단한 후 호출이 된다. 오프셋을 커밋해야 하는곳이 이 메소드 입니다. 현재의 파티션을 이어서 소비할 다른 컨슈머가 해당 파티션의 어디서부터 메세지 소비를 시작할지 알 수 있습니다.</p>

<p>**public void onPartitionsAssigned(Collection<TopicPartition> partitions)**</TopicPartition></p>

<p>이 메소드는 파티션이 브로커에게 재할당된 경우와 컨슈머가 파티션을 새로 할당받아 메세지 소비를 시작하기전에 호출이 된다.</p>

<p>아래는 ConsumerRebalanceListener 인터페이스 구현의 예 입니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">TopicPartition</span><span class="o">,</span> <span class="nc">OffsetAndMetadata</span><span class="o">&gt;</span> <span class="n">currentOffsets</span> <span class="o">=</span>
  <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="kd">private</span> <span class="kd">class</span> <span class="nc">HandleRebalance</span> <span class="kd">implements</span> <span class="nc">ConsumerRebalanceListener</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onPartitionsAssigned</span><span class="o">(</span>
    <span class="nc">Collection</span><span class="o">&lt;</span><span class="nc">TopicPartition</span><span class="o">&gt;</span> <span class="n">partitions</span><span class="o">)</span> <span class="o">{</span>
    
  <span class="o">}</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onPartitionsRevoked</span><span class="o">(</span>
    <span class="nc">Collection</span><span class="o">&lt;</span><span class="nc">TopicPartition</span><span class="o">&gt;</span> <span class="n">partitions</span><span class="o">)</span> <span class="o">{</span>
    
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span>
      <span class="s">"Lost partitions in rebalance.
      Committing current
      offsets:"</span> <span class="o">+</span> <span class="n">currentOffsets</span><span class="o">);</span>
    <span class="n">consumer</span><span class="o">.</span><span class="na">commitSync</span><span class="o">(</span><span class="n">currentOffsets</span><span class="o">);</span>  <span class="c1">// 1</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="k">try</span> <span class="o">{</span>
  <span class="n">consumer</span><span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">topics</span><span class="o">,</span> <span class="k">new</span> <span class="nc">HandleRebalance</span><span class="o">());</span> <span class="c1">// 2</span>
  <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">ConsumerRecords</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">records</span> <span class="o">=</span>
      <span class="n">consumer</span><span class="o">.</span><span class="na">poll</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">ConsumerRecord</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">record</span> <span class="o">:</span> <span class="n">records</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span>
        <span class="s">"topic = %s, partition = %s, offset = %d,
        customer = %s, country = %s\n"</span><span class="o">,</span>
        <span class="n">record</span><span class="o">.</span><span class="na">topic</span><span class="o">(),</span> <span class="n">record</span><span class="o">.</span><span class="na">partition</span><span class="o">(),</span> <span class="n">record</span><span class="o">.</span><span class="na">offset</span><span class="o">(),</span>
        <span class="n">record</span><span class="o">.</span><span class="na">key</span><span class="o">(),</span> <span class="n">record</span><span class="o">.</span><span class="na">value</span><span class="o">());</span>
        
      <span class="n">currentOffsets</span><span class="o">.</span><span class="na">put</span><span class="o">(</span>
        <span class="k">new</span> <span class="nf">TopicPartition</span><span class="o">(</span><span class="n">record</span><span class="o">.</span><span class="na">topic</span><span class="o">(),</span>
        <span class="n">record</span><span class="o">.</span><span class="na">partition</span><span class="o">()),</span> <span class="k">new</span>
        <span class="nc">OffsetAndMetadata</span><span class="o">(</span><span class="n">record</span><span class="o">.</span><span class="na">offset</span><span class="o">()+</span><span class="mi">1</span><span class="o">,</span> <span class="s">"no metadata"</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="n">consumer</span><span class="o">.</span><span class="na">commitAsync</span><span class="o">(</span><span class="n">currentOffsets</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">WakeupException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
 <span class="c1">// ignore, we're closing</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"Unexpected error"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="n">consumer</span><span class="o">.</span><span class="na">commitSync</span><span class="o">(</span><span class="n">currentOffsets</span><span class="o">);</span>
  <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
    <span class="n">consumer</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Closed consumer and we are done"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ol>
  <li>리밸런싱이 시작되면 컨슈머가 구독하던 파티션을 잃게 되므로 그 전에 오프셋을 커밋한다.</li>
  <li>subscribe() 메소드를 호출할 때 RebalanceListener 인터페이스를 구현한 객체를 인자로 전달한다.</li>
</ol>

<h3 id="consuming-records-with-specific-offsets">Consuming Records with Specific Offsets</h3>

<p>지금까지는 각 파티션의 마지막 커밋 오프셋부터 메세지를 읽고 처리하기 위해 poll() 메소드를 활용했습니다. 하지만, 다른 오프셋부터 읽기 시작하길 원할 때도 있습니다.</p>

<p>파티션의 맨 앞 오프셋부터 모든 메세지를 읽거나 파티션의 제일 끝 오프셋을 찾은 후 이후에 추가되는 메세지만 읽기 시작할때는 KafkaConsumer 클래스의 <code class="highlighter-rouge">seekToBeginning(Collection&lt;TopicPartition&gt; tp)</code> 와 <code class="highlighter-rouge">(seekToEnd(Collection&lt;TopicPartition&gt; tp)</code> 메소드를 사용할 수 있다.</p>

<p>Kafka에서 데이터를 처리한 후에 데이터 결과를 데이터베이스나 Hadoop에 저장할 때 어떤 데이터도 누락시키지 않아야 하고, 중복 저장되지 않게 해야한다고 가정해보겠습니다.</p>

<p>위 경우 컨슈머의 폴링 루프는 다음과 같이 구현할 수 있습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
  <span class="nc">ConsumerRecords</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">records</span> <span class="o">=</span> <span class="n">consumer</span><span class="o">.</span><span class="na">poll</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
  <span class="k">for</span> <span class="o">(</span><span class="nc">ConsumerRecord</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">record</span> <span class="o">:</span> <span class="n">records</span><span class="o">)</span> <span class="o">{</span>
    
    <span class="n">currentOffsets</span><span class="o">.</span><span class="na">put</span><span class="o">(</span>
      <span class="k">new</span> <span class="nf">TopicPartition</span><span class="o">(</span><span class="n">record</span><span class="o">.</span><span class="na">topic</span><span class="o">(),</span>
      <span class="n">record</span><span class="o">.</span><span class="na">partition</span><span class="o">()),</span>
      <span class="n">record</span><span class="o">.</span><span class="na">offset</span><span class="o">());</span>
      
    <span class="n">processRecord</span><span class="o">(</span><span class="n">record</span><span class="o">);</span>
    <span class="n">storeRecordInDB</span><span class="o">(</span><span class="n">record</span><span class="o">);</span>
    <span class="n">consumer</span><span class="o">.</span><span class="na">commitAsync</span><span class="o">(</span><span class="n">currentOffsets</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위 코드는 각 레코드를 처리할 때마다 오프셋을 커밋을 한다. 이렇게 하면 레코드는 데이터베이스에 확실하게 저장이 되지만 해당 레코드가 다시 처리되어 중복 데이터가 발생할 수 있습니다.</p>

<p>그래서 레코드와 오프셋 모드를 하나의 트랜잭션으로 처리하여 데이터베이스 저장하는 방법이 있습니다. 이때, 레코드와 오프셋 모두가 커밋되었는지 다시 처리해야하는지 알 수 있기 때문입니다.</p>

<p>오프셋이 Kafka 가 아닌 데이터베이스에 저장된다면 한 가지 문제를 해결해야합니다. 데이터베이스에 저장된 오프셋을 어떻게 사용해야 하는가입니다. 이 경우에 <code class="highlighter-rouge">seek()</code> 메소드를 사용합니다. 컨슈머가 기존 파티션을 읽기 시작하거나 새로운 파티션이 할당될 때 데이터베이스에 저장된 오프셋을 가져온 후 <code class="highlighter-rouge">seek()</code> 메소드를 사용하여 찾으면 됩니다.</p>

<p>아래 코드를 통해 알아보겠습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SaveOffsetsOnRebalance</span> <span class="kd">implements</span> <span class="nc">ConsumerRebalanceListener</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onPartitionsRevoked</span><span class="o">(</span>
    <span class="nc">Collection</span><span class="o">&lt;</span><span class="nc">TopicPartition</span><span class="o">&gt;</span><span class="n">partitions</span><span class="o">)</span> <span class="o">{</span>
      
    <span class="n">commitDBTransaction</span><span class="o">();</span> <span class="c1">// 1</span>
  <span class="o">}</span>
 
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onPartitionsAssigned</span><span class="o">(</span>
    <span class="nc">Collection</span><span class="o">&lt;</span><span class="nc">TopicPartition</span><span class="o">&gt;</span> <span class="n">partitions</span><span class="o">)</span> <span class="o">{</span>
  
    <span class="k">for</span><span class="o">(</span><span class="nc">TopicPartition</span> <span class="nl">partition:</span> <span class="n">partitions</span><span class="o">)</span>
      <span class="n">consumer</span><span class="o">.</span><span class="na">seek</span><span class="o">(</span><span class="n">partition</span><span class="o">,</span> <span class="n">getOffsetFromDB</span><span class="o">(</span><span class="n">partition</span><span class="o">));</span> <span class="c1">// 2</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="n">consumer</span><span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">topics</span><span class="o">,</span> <span class="k">new</span> <span class="nc">SaveOffsetOnRebalance</span><span class="o">(</span><span class="n">consumer</span><span class="o">));</span>
<span class="n">consumer</span><span class="o">.</span><span class="na">poll</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">// 3</span>

<span class="k">for</span> <span class="o">(</span><span class="nc">TopicPartition</span> <span class="nl">partition:</span> <span class="n">consumer</span><span class="o">.</span><span class="na">assignment</span><span class="o">())</span>
  <span class="n">consumer</span><span class="o">.</span><span class="na">seek</span><span class="o">(</span><span class="n">partition</span><span class="o">,</span> <span class="n">getOffsetFromDB</span><span class="o">(</span><span class="n">partition</span><span class="o">));</span>
  
<span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
  <span class="nc">ConsumerRecords</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">records</span> <span class="o">=</span>
    <span class="n">consumer</span><span class="o">.</span><span class="na">poll</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
    
  <span class="k">for</span> <span class="o">(</span><span class="nc">ConsumerRecord</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">record</span> <span class="o">:</span> <span class="n">records</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">processRecord</span><span class="o">(</span><span class="n">record</span><span class="o">);</span>
    <span class="n">storeRecordInDB</span><span class="o">(</span><span class="n">record</span><span class="o">);</span>
    <span class="n">storeOffsetInDB</span><span class="o">(</span><span class="n">record</span><span class="o">.</span><span class="na">topic</span><span class="o">(),</span> <span class="n">record</span><span class="o">.</span><span class="na">partition</span><span class="o">(),</span> <span class="n">record</span><span class="o">.</span><span class="na">offset</span><span class="o">());</span> <span class="c1">// 4</span>
  <span class="o">}</span>
  <span class="n">commitDBTransaction</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위 코드는 <strong>ConsumerRebalanceListener</strong> 와 <code class="highlighter-rouge">seek()</code> 를 사용해서 데이터베이스에 저장된 오프셋부터 처리하도록 한다.</p>

<ol>
  <li><code class="highlighter-rouge">commitDBTransaction()</code> 메소드를 이용하여 데이터베이스 트랜잭션으로 오프셋을 커밋합니다. 리밸런싱이 시작되면 컨슈머가 현재 소비하던 파티션을 잃게 되므로 그 전에 오프셋을 저장해야 합니다.</li>
  <li><code class="highlighter-rouge">getOffsetFromDB(partition)</code> 에서는 데이터베이스에 저장된 오프셋을 가져오며, <code class="highlighter-rouge">seek()</code> 를 호출하여 새로 할당된 파티션의 오프셋들을 찾습니다.</li>
  <li>컨슈머를 처음 시작할 때 토픽 구독 요청 후 <code class="highlighter-rouge">poll()</code> 을 호출하여 컨슈머 그룹에 합류하고 파티션을 할당 받는다. 다음 <code class="highlighter-rouge">seek()</code> 메소드를 호출하여 할당된 파티션들의 오프셋을 찾는다.</li>
  <li><code class="highlighter-rouge">processRecord(record)</code> 는 데이터를 처리하며 <code class="highlighter-rouge">storeRecordInDB(record)</code> 는 데이터베이스에 데이터를 저장한다. 마지막으로 <code class="highlighter-rouge">storeOffsetInDB(record.topic(), record.partition(), record.offset());</code> 는 오프셋을 데이터베이스에 저장한다.</li>
</ol>

<p>외부 저장소에 오프셋과 데이터를 저장하는 방법은 많습니다. 하지만, 오프셋이 저장되어 컨슈머가 그 오프셋으로부터 메세지를 읽을 수 있게 하려면, 모든 방법에서 ConsumerRebalanceListenr 와 seek() 를 사용해야 합니다.</p>

<h3 id="but-how-do-we-exit">But How Do We Exit?</h3>

<p>컨슈머는 스레드로 동작하며 무한 폴링루프를 실행합니다. 이 폴링 루프를 벗어나서 컨슈머를 종료시키는 방법을 알아보겠습니다.</p>

<p>폴링 루프를 벗어나 컨슈머 스레드가 정상적으로 종료되도록 하기 위해선 또 다른 스레드에서 KafkaConsumer 객체의 <code class="highlighter-rouge">wakeup()</code> 메소드를 호출해야 합니다. <code class="highlighter-rouge">wakeup()</code> 메소드를 호출하면 <strong>WakeupException</strong> 예외를 발생시켜 <code class="highlighter-rouge">poll()</code> 메소드가 중단됩니다.</p>

<p>하지만 컨슈머 스레드가 종료하기 전에는 반드시 <code class="highlighter-rouge">close()</code> 메소드를 호출하여 닫아야한다. 이 메소드에서는 필요하면 오프셋이 커밋되며, 현재의 컨수머가 그룹을 떠난다는 메세지가 GroupCoordinator 에게 전송된다. 그러면 세션은 타임아웃을 기다리지 않고 GroupCoordinator 는 곧바로 리밸런싱을 시작시키며, 현재의 컨슈머에게 할당된 파티션들이 그룹의 다른 컨슈머에게 재할당된다.</p>

<p>컨슈머 어플리케이션이 main 스레드로 실행 중일 때 폴링 루프를 벗어나서 종료되는 코드의 예를 보여드리겠습니다. 전체 코드는 http://bit.ly/2u47e9A 에서 확인하시면 됩니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">addShutdownHook</span><span class="o">(</span><span class="k">new</span> <span class="nc">Thread</span><span class="o">()</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Starting exit..."</span><span class="o">);</span>
    <span class="n">consumer</span><span class="o">.</span><span class="na">wakeup</span><span class="o">();</span>  <span class="c1">// 1</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="n">mainThread</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">});</span>

<span class="o">...</span>

<span class="k">try</span> <span class="o">{</span>
  <span class="c1">// looping until ctrl-c, the shutdown hook will cleanup on exit</span>
  <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">ConsumerRecords</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">records</span> <span class="o">=</span>
      <span class="n">movingAvg</span><span class="o">.</span><span class="na">consumer</span><span class="o">.</span><span class="na">poll</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">+</span> <span class="s">"-- waiting for data..."</span><span class="o">);</span>
    
  <span class="k">for</span> <span class="o">(</span><span class="nc">ConsumerRecord</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">record</span> <span class="o">:</span> <span class="n">records</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span>
      <span class="s">"offset = %d, key = %s, value = %s\n"</span><span class="o">,</span>
      <span class="n">record</span><span class="o">.</span><span class="na">offset</span><span class="o">(),</span> <span class="n">record</span><span class="o">.</span><span class="na">key</span><span class="o">(),</span> <span class="n">record</span><span class="o">.</span><span class="na">value</span><span class="o">());</span>
  <span class="o">}</span>
  
  <span class="k">for</span> <span class="o">(</span><span class="nc">TopicPartition</span> <span class="nl">tp:</span> <span class="n">consumer</span><span class="o">.</span><span class="na">assignment</span><span class="o">())</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span>
      <span class="s">"Committing offset at position:"</span> <span class="o">+</span>  <span class="n">consumer</span><span class="o">.</span><span class="na">position</span><span class="o">(</span><span class="n">tp</span><span class="o">));</span>
    <span class="n">movingAvg</span><span class="o">.</span><span class="na">consumer</span><span class="o">.</span><span class="na">commitSync</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">WakeupException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">// ignore for shutdown  // 2  </span>
<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
  <span class="n">consumer</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> <span class="c1">// 3</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Closed consumer and we are done"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ol>
  <li>컨슈머 실행 중 <code class="highlighter-rouge">Ctrl + C</code> 키를 누르면 셧다운 후크로 등록한 스레드의 <code class="highlighter-rouge">run()</code> 메소드가 실행되어 <code class="highlighter-rouge">wakeup()</code>을 호출한다. 그 다음 폴링 루프의 <code class="highlighter-rouge">poll()</code>를 실행할 때 <strong>WakeupException</strong> 예외를 발생시켜 폴링 루프를 벗어난다.</li>
  <li>다른 스레드에서 <code class="highlighter-rouge">wakeup()</code> 을 호출하면 <code class="highlighter-rouge">poll()</code> 을 실행할 때 <strong>WakeupException</strong> 예외가 발생한다.</li>
  <li>컨슈머 스레드는 위에서 기술하듯이 종료 전에 반드시 닫아야 합니다.</li>
</ol>
:ET