I"E<p><em>이 포스트는 <a href="https://github.com/wuzhouhui/misc/blob/master/programming/db/MongoDB.The.Definitive.Guide.pdf">MongoDB: The Definitive Guide</a> 를 바탕으로 작성하였습니다.</em></p>

<p>몽고디비는 강력하고 유연하며 확장성이 높은 데이터베이스입니다. 보조 인덱스, 범위 쿼리, 정렬, 집계, 공간 인덱스 등과 같은 기능과 함께 확장할 수 있는 기능을 결합하였습니다.</p>

<h2 id="ease-of-use">Ease of Use</h2>

<p>MongoDB 는 관계형 데이터베이스가 아니라 문서 지향 데이터베이스입니다.</p>

<p>문서 지향 데이터베이스에서는 ‘행’ 개념 대신에 보다 유연한 모델인 ‘문서’를 사용합니다. 내장 문서와 배열을 허용함으로써 문서 지향 모델은 복잡한 계층 관계를 하나의 레코드로 표현할 수 있습니다. 이 방식은 최신 OOP 를 사용하는 개발자의 관점에 매우 적합합니다.</p>

<p>또한, MongoDB 에서는 문서의 Key 와 Value 를 미리 정의하지 않습니다. 따라서 고정된 형태인 스키마가 없습니다. 고정된 스키마가 없기 때문에 필요할 때마다 필드를 추가하거나 제거하는 것이 쉽습니다.</p>

<h2 id="easy-scaling">Easy Scaling</h2>

<p>저장해야 할 데이터가 증가함에 따라 개발자는 <em>데이터베이스를 어떻게 확장할 것인가</em> 라는 어려운 의사 결정상황에 직면합니다.</p>

<p>데이터베이스의 확장은 더 큰 장비로 <strong>성능 확장(scale-up)</strong> 을 하거나 여러 장비에 데이터를 나누는 <strong>분산 확장(scale-out)</strong> 두 갈림길에 서게 됩니다.</p>

<p>성능확장은 간편하지만 대형 장비는 가격이 비싸고 더 이상 확장할 수 없는 물리적 한계에 부딪힙니다.</p>

<p>분산확장은 저장 공간 또는 성능 향상을 위해 저렴한 서버를 구매해서 클러스터에 추가하는 방법입니다. 이는 경제적이고 확장이 용이하지만, 수천 대의 장비를 운영해야 하기 때문에 일관성 문제등 관리가 더 어려워집니다.</p>

<p>MongoDB 는 분산 확장을 염두에 두고 설계되었습니다. 문서 지향 데이터 모델은 데이터를 여러 서버에 더 쉽게 분산할 수 있게 해줍니다. 문서를 자동적으로 재분배하고 사용자 요청을 올바른 장비에 라우팅함으로써 클러스터 내 데이터양과 부하를 조절할 수 있게 해줍니다.</p>

<p>클러스터에 용량이 더 필요하다면, 새로운 장비를 클러스터에 추가하여 MongoDB 가 새로운 장비에 기존 데이터를 적절하게 분산할 것입니다.</p>

<h2 id="tons-of-features">Tons of Features…</h2>

<p>MongoDB 는 범용 데이터베이스 목적으로 만들어졌기 때문에 데이터의 생성, 읽기, 변경, 삭제 외에도 특별한 기능을 제공합니다.</p>

<p><strong>Indexing</strong></p>

<p>MongoDB 는 다양한 쿼리의 속도를 빠르게 할 수 있는 일반적인 보조 인덱스뿐만 아니라 거유 인덱싱, 복합 인덱싱, 공간정보 인덱싱, 전문 인덱싱 기능도 제공한다.</p>

<p><strong>Aggregation</strong></p>

<p>MongoDB 는 집계 파이프라인을 지원하여 단순한 조각들로부터 복잡한 집계를 생성할 수 있게 하며, 데이터베이스가 이를 최적화할 수 있게 한다.</p>

<p><strong>Fixed-size collections</strong></p>

<p>MongoDB 는 세션과 같이 특정 시간에 만료되는 데이터에 대한 TTL 콜렉션을 지원한다. 또한 로그와 같은 최신 데이터를 보유하는데 유용한 고정 크기의 컬렉션을 지원한다.</p>

<p><strong>File storage</strong></p>

<p>MongoDB 는 큰 파일과 파일 메타데이터를 편리하게 저장할 수 있는 프로토콜을 지원한다.</p>

<p>관계형 데이터베이스에서 일반적으로 제공하는 몇몇 기능이 MongoDB 에는 없습니다. 대표적으로 조인과 다중행 트랜잭션입니다. 이런 기능은 분산시스템에서 효율적으로 제공하기 어렵기 때문에 제외되었으며, 높은 확장성을 제공하는 아키텍처를 위한 결정입니다.</p>

<h2 id="without-sacrificing-speed">…Without Sacrificing Speed</h2>

<p>MongoDB 의 주요 목표는 뛰어난 성능입니다. 문서에 추가 공간을 동적으로 미리 할당하여 둠으로써 저장소를 더 쓰더라도 일관된 성능을 유지할 수 있도록 했습니다. 이는 캐시처럼 제한된 용량의 램을 사용하여 쿼리에 알맞은 인덱스를 자동적으로 선택합니다.</p>

<p>MongoDB 가 강력한 성능을 제공하면서도 관계형 시스템의 기능을 최대한 제공하려 하지만 관계형 데이터베이스가 하는 모든 것을 제공하기 위해 만들어진 것은 아닙니다. 데이터베이스 서버는 연산과 로직을 드라이버 또는 사용자 어플리케이션 코드에서 처리하도록 최대한 클라이언트의 몫으로 넘깁니다.</p>

<p>MongoDB 가 고성능을 낼 수 있는 이유 중 하나가 이런 설계입니다.</p>

<h2 id="lets-get-started">Let’s Get Started</h2>

<p>MongoDB 프로젝트의 주 관심사는 확장성 높고 유연하고 빠른 기능을 갖춘 데이터 저장소를 만드는것입니다.</p>

<p>앞으로 포스트에대해서 내용을 다뤄보겠습니다.</p>
:ET