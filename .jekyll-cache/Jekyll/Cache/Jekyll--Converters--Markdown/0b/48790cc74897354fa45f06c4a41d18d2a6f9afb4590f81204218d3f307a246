I"[b<h2 id="순수-함수와-고차-함수">순수 함수와 고차 함수</h2>

<p>컴퓨터 과학 관점에서 함수는 1차 함수, 고차 함수, 순수 함수와 같이 다양한 형태를 가질 수 있습니다.</p>

<p>이것은 수학의 관점에서도 마찬가지입니다. 고차 함수를 사용하여 다음 중 하나를 수행할 수 있습니다.</p>

<ul>
  <li>하나 이상의 함수를 파라미터로 사용해 일부 연산을 수행</li>
  <li>함수에서 함수를 결과로 리턴</li>
</ul>

<p>고차함수를 제외한 다른 모든 함수는 1차 함수입니다. 그러나 수학 관점에서 고차 함수는 연산자 또는 함수라 불립니다. 반면에 입력에 의해서만 결정되고 부수 효과가 없으며 관찰 가능한 함수를 순수 함수라고 합니다.</p>

<h3 id="순수-함수">순수 함수</h3>

<p>순수 함수를 가장 잘 사용한 예는 프로그램 / 어플리케이션의 코어를 순수함수로 만들고 네트워크 오버헤드와 예외 같은 모든 I/O 기능이나 부수 효과를 외부 효과에 노출하는 것 입니다.</p>

<p>순수함수의 예를 들어보겠습니다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">pureFunction</span><span class="o">(</span><span class="nc">Name</span> <span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">s</span><span class="s">"My Name is $Name"</span>
<span class="k">def</span> <span class="nf">notpureFunction</span><span class="o">(</span><span class="nc">Name</span> <span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nf">println</span><span class="o">(</span><span class="n">s</span><span class="s">"My Name is $Name"</span><span class="o">)</span>
</code></pre></div></div>

<p>위 두 예제를 봐서 <code class="highlighter-rouge">pureFuction</code> 순수 함수를 테스트 하려면 다음처럼 assert 에 순수 함수의 리턴 값과 입력을 기반으로 예상하는 값을 지정합니다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">assert</span><span class="o">(</span><span class="nf">pureFunction</span><span class="o">(</span><span class="s">"Alice"</span><span class="o">)</span> <span class="o">==</span> <span class="s">"My Name is Alice"</span><span class="o">)</span>
</code></pre></div></div>

<p>순수 함수가 아닌경우 테스트하려면 표준 출력을 리디렉션한 후 assert 를 적용해야 합니다. 이처럼 순수 함수를 사용하면 코드 복제를 최소화해 코드를 쉽게 재사용할 수 있습니다.</p>

<p>다른 예도 알아보겠습니다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scala</span><span class="o">&gt;</span> <span class="k">def</span> <span class="nf">pureSum</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
<span class="n">pureSum</span><span class="k">:</span> <span class="o">(</span><span class="kt">x:</span> <span class="kt">Int</span><span class="o">,</span> <span class="kt">y:</span> <span class="kt">Int</span><span class="o">)</span><span class="nc">Int</span>

<span class="n">scala</span><span class="o">&gt;</span> <span class="k">def</span> <span class="nf">notpureSum</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="nf">println</span><span class="o">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">)</span>
<span class="n">notpureSum</span><span class="k">:</span> <span class="o">(</span><span class="kt">x:</span> <span class="kt">Int</span><span class="o">,</span> <span class="kt">y:</span> <span class="kt">Int</span><span class="o">)</span><span class="nc">Unit</span>

<span class="n">scala</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>순수 함수를 사용하면 테스트 코드를 추론하는데 도움이 됩니다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">pureIncrease</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>
</code></pre></div></div>

<p>만약 순수함수로 작성하지 않으면 아래와 같이 작성해야 합니다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">notpureIncrease</span><span class="o">()</span> <span class="k">=</span> <span class="o">{</span>
  <span class="n">inc</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="n">inc</span>
<span class="o">}</span>
</code></pre></div></div>

<p>또한 순수함수는 다음과 같이 사용할 수 있습니다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scala</span><span class="o">&gt;</span> <span class="k">def</span> <span class="nf">pureSum</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
<span class="n">pureSum</span><span class="k">:</span> <span class="o">(</span><span class="kt">x:</span> <span class="kt">Int</span><span class="o">,</span> <span class="kt">y:</span> <span class="kt">Int</span><span class="o">)</span><span class="nc">Int</span>

<span class="n">scala</span><span class="o">&gt;</span> <span class="nv">Seq</span><span class="o">.</span><span class="py">range</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">).</span><span class="py">reduce</span><span class="o">(</span><span class="n">pureSum</span><span class="o">)</span>
<span class="n">res1</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">45</span>
</code></pre></div></div>

<h3 id="익명함수">익명함수</h3>

<p>보통 코드에서 함수를 정의하고 싶지 않을때 사용합니다.</p>

<p>예를통해 알아보겠습니다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scala</span><span class="o">&gt;</span> <span class="k">def</span> <span class="nf">Fee</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Double</span><span class="o">,</span> <span class="n">rate</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=&gt;</span> <span class="nc">Double</span><span class="o">)</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="o">{</span>
  <span class="n">x</span> <span class="o">+</span> <span class="nf">rate</span><span class="o">(</span><span class="n">x</span><span class="o">)</span>
<span class="o">}</span>
<span class="nc">Fee</span><span class="k">:</span> <span class="o">(</span><span class="kt">x:</span> <span class="kt">Double</span><span class="o">,</span> <span class="kt">rate:</span> <span class="kt">Double</span> <span class="o">=&gt;</span> <span class="nc">Double</span><span class="o">)</span><span class="nc">Double</span>

<span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Fee</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="o">(</span><span class="n">percent</span> <span class="k">:</span> <span class="kt">Double</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">percent</span> <span class="o">*</span> <span class="mf">0.05</span><span class="o">)</span>
<span class="n">res3</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="mf">105.0</span>
</code></pre></div></div>

<p>이 예에서는 별도의 콜백 함수를 선언하는 대신 익명 함수를 직접 전달했고 <code class="highlighter-rouge">rate</code> 함수와 같이 동일한 작업을 수행했습니다.</p>

<p>익명함수에서는 타입을 생략할 수 있습니다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scala</span><span class="o">&gt;</span> <span class="nc">Fee</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="n">percent</span> <span class="k">=&gt;</span> <span class="n">percent</span> <span class="o">*</span> <span class="mf">0.05</span><span class="o">)</span>
<span class="n">res5</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="mf">105.0</span>
</code></pre></div></div>

<h3 id="고차함수">고차함수</h3>

<p>Scala 의 함수형 프로그래밍에서는 함수를 파라미터로 전달할 수 있고, 함수의 결과로 함수를 리턴할 수도 있습니다. 이를 고차함수라 정의합니다.</p>

<p>예를통해 알아보겠습니다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Object</span> <span class="nc">Test</span> <span class="o">{</span>
  <span class="k">def</span> <span class="nf">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">{</span>
    <span class="nf">println</span><span class="o">(</span><span class="nf">testHOF</span><span class="o">(</span><span class="n">paramFunction</span><span class="o">,</span> <span class="mi">10</span><span class="o">))</span>
  <span class="o">}</span>
  
  <span class="k">def</span> <span class="nf">testHOF</span><span class="o">(</span><span class="n">func</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=&gt;</span> <span class="nc">String</span><span class="o">,</span> <span class="n">value</span> <span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="nf">func</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>
  <span class="k">def</span> <span class="nf">paramFunction</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">x</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span> <span class="k">=</span> <span class="s">"["</span> <span class="o">+</span> <span class="nv">x</span><span class="o">.</span><span class="py">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">"]"</span>
<span class="o">}</span>
</code></pre></div></div>

<p>고차함수는 파라미터로 다른 함수를 받아들이고 결과로 리턴하는 함수로 정의할 수 있습니다.</p>

<p>간단한 함수 2개를 정의해보겠습니다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">division</span><span class="o">(</span><span class="n">value</span> <span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="nv">value</span><span class="o">.</span><span class="py">toDouble</span> <span class="o">/</span> <span class="mi">2</span>
<span class="k">def</span> <span class="nf">addTwo</span><span class="o">(</span><span class="n">value</span> <span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="n">value</span> <span class="o">+</span> <span class="mi">2</span>
</code></pre></div></div>

<p>위와같이 두 함수의 공통점은 두 함수 모두 Int 를 받고 AnyVal 을 호출할 수 있는 처리된 다른 값을 리턴합니다. 이제 파라미터 중에서 다른 함수를 받는 고차함수를 정의해보겠습니다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">printRange</span><span class="o">(</span><span class="n">start</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">end</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">func</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=&gt;</span> <span class="nc">AnyVal</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
  <span class="nf">for</span><span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="n">start</span> <span class="n">to</span> <span class="n">end</span><span class="o">)</span>
    <span class="nf">println</span><span class="o">(</span><span class="nf">func</span><span class="o">(</span><span class="n">i</span><span class="o">))</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위 함수를 이용해 출력해보겠습니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scala&gt; def printRange(start: Int, end: Int, func: Int =&gt; AnyVal): Unit = {
     |     for(i &lt;- start to end)
     |         println(func(i))
     | }
printRange: (start: Int, end: Int, func: Int =&gt; AnyVal)Unit

scala&gt; def addTwo(value : Int) : Int = value + 2
addTwo: (value: Int)Int

scala&gt; def division(value : Int) : Double = value.toDouble / 2
division: (value: Int)Double

scala&gt; printRange(1, 10, addTwo)
3
4
5
6
7
8
9
10
11
12

scala&gt; printRange(1, 10, division)
0.5
1.0
1.5
2.0
2.5
3.0
3.5
4.0
4.5
5.0

scala&gt;
</code></pre></div></div>

<p>고차함수를 이용해서 익명함수 Fee 다시 정의해보겠습니다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">Fee</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Double</span><span class="o">,</span> <span class="n">rate</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=&gt;</span> <span class="nc">Double</span><span class="o">)</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="o">{</span>
  <span class="n">x</span> <span class="o">+</span> <span class="nf">rate</span><span class="o">(</span><span class="n">x</span><span class="o">)</span>
<span class="o">}</span>
<span class="k">def</span> <span class="nf">rate</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span> <span class="k">=</span> <span class="n">x</span> <span class="o">*</span> <span class="mf">0.05</span>

<span class="nc">Fee</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="n">rate</span><span class="o">)</span>
<span class="mf">105.0</span>
</code></pre></div></div>

<h3 id="함수를-리턴-값으로-사용">함수를 리턴 값으로 사용</h3>

<p>고차함수를 이용하여 다음과 같이 사용할 수 있습니다.ㅌ</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">Fee</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
  <span class="nf">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">1000</span><span class="o">)</span>
    <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="s">"X is greater than 1000 value is : "</span> <span class="o">+</span> <span class="n">x</span> <span class="o">*</span> <span class="mf">0.05</span>
  <span class="nf">else</span>
    <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="s">"X is not greather than 1000 value is : "</span> <span class="o">+</span> <span class="n">x</span> <span class="o">*</span> <span class="mf">0.05</span>
<span class="o">}</span>
<span class="k">val</span> <span class="nv">returned</span> <span class="k">=</span> <span class="nc">Fee</span><span class="o">(</span><span class="mi">2000</span><span class="o">)</span>
<span class="nf">returned</span><span class="o">(</span><span class="mi">2000</span><span class="o">)</span>
<span class="n">res8</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">X</span> <span class="n">is</span> <span class="n">greater</span> <span class="n">than</span> <span class="mi">1000</span> <span class="n">value</span> <span class="n">is</span> <span class="k">:</span> <span class="err">100</span><span class="kt">.</span><span class="err">0</span>
</code></pre></div></div>

<h3 id="고차-함수-사용">고차 함수 사용</h3>

<p>고차함수를 사용한 curry, uncurry 함수를 사용해 보겠습니다.</p>

<p>아래 예제를 통해 보시면 됩니다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">trait</span> <span class="nc">Curry</span> <span class="o">{</span>
    <span class="k">def</span> <span class="nf">curry</span><span class="o">[</span><span class="kt">A</span>, <span class="kt">B</span>, <span class="kt">C</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="o">(</span><span class="kt">A</span><span class="o">,</span> <span class="kt">B</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">C</span><span class="o">)</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">B</span> <span class="k">=&gt;</span> <span class="n">C</span>
    <span class="k">def</span> <span class="nf">uncurry</span><span class="o">[</span><span class="kt">A</span>, <span class="kt">B</span>, <span class="kt">C</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">B</span> <span class="k">=&gt;</span> <span class="n">C</span><span class="o">)</span><span class="k">:</span> <span class="o">(</span><span class="kt">A</span><span class="o">,</span> <span class="kt">B</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">C</span>
<span class="o">}</span>

<span class="k">object</span> <span class="nc">CurryImplement</span> <span class="k">extends</span> <span class="nc">Curry</span> <span class="o">{</span>
    <span class="k">def</span> <span class="nf">curry</span><span class="o">[</span><span class="kt">A</span>, <span class="kt">B</span>, <span class="kt">C</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="o">(</span><span class="kt">A</span><span class="o">,</span> <span class="kt">B</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">C</span><span class="o">)</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">B</span> <span class="k">=&gt;</span> <span class="n">C</span> <span class="k">=</span> <span class="o">{</span>
        <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
            <span class="o">(</span><span class="n">y</span><span class="k">:</span> <span class="kt">B</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nf">f</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">def</span> <span class="nf">uncurry</span><span class="o">[</span><span class="kt">A</span>, <span class="kt">B</span>, <span class="kt">C</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">B</span> <span class="k">=&gt;</span> <span class="n">C</span><span class="o">)</span><span class="k">:</span> <span class="o">(</span><span class="kt">A</span><span class="o">,</span> <span class="kt">B</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">C</span> <span class="k">=</span> <span class="o">{</span>
        <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">A</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">B</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nf">f</span><span class="o">(</span><span class="n">x</span><span class="o">)(</span><span class="n">y</span><span class="o">)</span>
    <span class="o">}</span>
<span class="o">}</span>


<span class="k">object</span> <span class="nc">Scala</span><span class="o">{</span>
    <span class="k">def</span> <span class="nf">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
        <span class="k">def</span> <span class="nf">add</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span> <span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="nv">x</span><span class="o">.</span><span class="py">toDouble</span> <span class="o">+</span> <span class="n">y</span>

        <span class="k">val</span> <span class="nv">PlusCount</span> <span class="k">=</span> <span class="nv">CurryImplement</span><span class="o">.</span><span class="py">curry</span><span class="o">(</span><span class="n">add</span><span class="o">)</span>
        <span class="nf">println</span><span class="o">(</span><span class="nc">PlusCount</span><span class="o">(</span><span class="mi">3</span><span class="o">)(</span><span class="mi">4L</span><span class="o">))</span>

        <span class="k">val</span> <span class="nv">increment</span> <span class="k">=</span> <span class="nc">PlusCount</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
        <span class="nf">println</span><span class="o">(</span><span class="nf">increment</span><span class="o">(</span><span class="mi">1L</span><span class="o">))</span>

        <span class="k">val</span> <span class="nv">unadd</span> <span class="k">=</span> <span class="nv">CurryImplement</span><span class="o">.</span><span class="py">uncurry</span><span class="o">(</span><span class="nc">PlusCount</span><span class="o">)</span>
        <span class="nf">println</span><span class="o">(</span><span class="nf">unadd</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">6L</span><span class="o">))</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>currying</strong> : 다중의 파라미터를 갖는 함수를 단일 파라미터를 갖는 함수로 바꾸는 것을 말합니다.</p>

<p><strong>uncurrying</strong> : 커링에 대한 역함수화의 한 형태입니다. 함수 f 를 취하면 함수 g 를 리턴 받고 함수 f 와 g 모두에 파라미터를 받는 새로운 함수 h 를 만듭니다. 그리고 결과로 해당 파라미터에 대해 f 어플리케이션과 차례로 g 어플리케이션을 리턴합니다.</p>
:ET