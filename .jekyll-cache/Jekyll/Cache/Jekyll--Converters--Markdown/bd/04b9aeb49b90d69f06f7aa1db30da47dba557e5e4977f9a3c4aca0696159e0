I"9<h2 id="network-구성">Network 구성</h2>

<p>크게 2가지로 나눠서 해보겠습니다.</p>

<p>첫 번째로는 Hyperledger 에서 제공하는 <code class="language-plaintext highlighter-rouge">byfn.sh</code> 파일을 이용하여 간단하고 빠르게 네트워크를 구성하는 방법을 이용할것입니다.</p>

<p>두 번째로는 hyperledger 에서 제공하는 <code class="language-plaintext highlighter-rouge">binary</code> 파일들을 이용하여 천천히 하나하나 명령어를 설명하면서 진행하겠습니다.</p>

<p>현 포스트는 첫 번째 방법을 이용하여 네트워크를 구성해보겠습니다.</p>

<h3 id="version">Version</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vagrant 2.2.5
Ubuntu 16.04.6 LTS
Hyperledger Fabric 1.4.x
</code></pre></div></div>

<blockquote>
  <p>Vagrantfile</p>
</blockquote>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vagrant.configure<span class="o">(</span><span class="s2">"2"</span><span class="o">)</span> <span class="k">do</span> |config|
  vm_num <span class="o">=</span> 1
  node_cpu <span class="o">=</span> 1 <span class="c"># 1Core</span>
  node_memory <span class="o">=</span> <span class="s2">"2048"</span> <span class="c"># 2G Memory</span>
  node_network <span class="o">=</span> <span class="s2">"10.30.30"</span>
  node_prefix <span class="o">=</span> <span class="s2">"fabric"</span>

  config.vm.box <span class="o">=</span> <span class="s2">"ubuntu/xenial64"</span>
  config.vm.box_check_update <span class="o">=</span> <span class="nb">false</span>
  <span class="c">#config.disksize.size = "10GB" # &gt; 10GB</span>

  <span class="o">(</span>1..vm_num<span class="o">)</span>.each <span class="k">do</span> |i|
    config.vm.define <span class="s2">"#{node_prefix}-#{i}"</span> <span class="k">do</span> |node|
      <span class="nb">hostname</span> <span class="o">=</span> <span class="s2">"#{node_prefix}-#{i}"</span>
      hostip <span class="o">=</span> <span class="s2">"#{node_network}.#{i + 1}"</span>

      node.vm.hostname <span class="o">=</span> <span class="nb">hostname
      </span>node.vm.network <span class="s2">"private_network"</span>, ip: hostip

      node.vm.provider <span class="s2">"virtualbox"</span> <span class="k">do</span> |vb|
        vb.name <span class="o">=</span> <span class="s2">"#{node_prefix}-#{i}"</span>
        vb.gui <span class="o">=</span> <span class="nb">false
        </span>vb.cpus <span class="o">=</span> node_cpu
        vb.memory <span class="o">=</span> node_memory
      end
    end
  end
end
</code></pre></div></div>

<h3 id="1-vm-생성--재시작">1. VM 생성 / 재시작</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>vagrant up

Bringing machine <span class="s1">'fabric-1'</span> up with <span class="s1">'virtualbox'</span> provider...
<span class="o">==&gt;</span> fabric-1: Importing base box <span class="s1">'ubuntu/xenial64'</span>...
<span class="o">==&gt;</span> fabric-1: Matching MAC address <span class="k">for </span>NAT networking...
<span class="o">==&gt;</span> fabric-1: Setting the name of the VM: fabric-1
<span class="o">==&gt;</span> fabric-1: Fixed port collision <span class="k">for </span>22 <span class="o">=&gt;</span> 2222. Now on port 2200.
<span class="o">==&gt;</span> fabric-1: Clearing any previously <span class="nb">set </span>network interfaces...
<span class="o">==&gt;</span> fabric-1: Preparing network interfaces based on configuration...
    fabric-1: Adapter 1: nat
    fabric-1: Adapter 2: hostonly
<span class="o">==&gt;</span> fabric-1: Forwarding ports...
    fabric-1: 22 <span class="o">(</span>guest<span class="o">)</span> <span class="o">=&gt;</span> 2200 <span class="o">(</span>host<span class="o">)</span> <span class="o">(</span>adapter 1<span class="o">)</span>
<span class="o">==&gt;</span> fabric-1: Running <span class="s1">'pre-boot'</span> VM customizations...
<span class="o">==&gt;</span> fabric-1: Booting VM...
<span class="o">==&gt;</span> fabric-1: Waiting <span class="k">for </span>machine to boot. This may take a few minutes...
    fabric-1: SSH address: 127.0.0.1:2200
    fabric-1: SSH username: vagrant
    fabric-1: SSH auth method: private key
    fabric-1:
    fabric-1: Vagrant insecure key detected. Vagrant will automatically replace
    fabric-1: this with a newly generated keypair <span class="k">for </span>better security.
    fabric-1:
    fabric-1: Inserting generated public key within guest...
    fabric-1: Removing insecure key from the guest <span class="k">if </span>it<span class="s1">'s present...
    fabric-1: Key inserted! Disconnecting and reconnecting using new SSH key...
==&gt; fabric-1: Machine booted and ready!
==&gt; fabric-1: Checking for guest additions in VM...
    fabric-1: The guest additions on this VM do not match the installed version of
    fabric-1: VirtualBox! In most cases this is fine, but in rare cases it can
    fabric-1: prevent things such as shared folders from working properly. If you see
    fabric-1: shared folder errors, please make sure the guest additions within the
    fabric-1: virtual machine match the version of VirtualBox you have installed on
    fabric-1: your host and reload your VM.
    fabric-1:
    fabric-1: Guest Additions Version: 5.1.38
    fabric-1: VirtualBox Version: 6.0
==&gt; fabric-1: Setting hostname...
==&gt; fabric-1: Configuring and enabling network interfaces...
==&gt; fabric-1: Mounting shared folders...
    fabric-1: /vagrant =&gt; /Users/has3ong/Desktop/fabric-2
</span></code></pre></div></div>

<h3 id="2-vm-접속">2. VM 접속</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>vagrant ssh fabric-1
Welcome to Ubuntu 16.04.6 LTS <span class="o">(</span>GNU/Linux 4.4.0-159-generic x86_64<span class="o">)</span>

 <span class="k">*</span> Documentation:  https://help.ubuntu.com
 <span class="k">*</span> Management:     https://landscape.canonical.com
 <span class="k">*</span> Support:        https://ubuntu.com/advantage

0 packages can be updated.
0 updates are security updates.

New release <span class="s1">'18.04.3 LTS'</span> available.
Run <span class="s1">'do-release-upgrade'</span> to upgrade to it.

vagrant@fabric-1:~<span class="err">$</span>
</code></pre></div></div>

<h3 id="3-vm-중지">3. VM 중지</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>vagrant halt fabric-1
<span class="o">==&gt;</span> fabric-1: Attempting graceful shutdown of VM...
</code></pre></div></div>

<h3 id="4-vm-삭제">4. VM 삭제</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>vagrant destroy fabric-1
    fabric-1: Are you sure you want to destroy the <span class="s1">'fabric-1'</span> VM? <span class="o">[</span>y/N] y
<span class="o">==&gt;</span> fabric-1: Destroying VM and associated drives...
</code></pre></div></div>

<h1 id="vm-setting">VM Setting</h1>

<h2 id="1-vm-접속-실습파일-다운로드-및-적용">1. VM 접속 실습파일 다운로드 및 적용</h2>

<h3 id="11-vm-접속">1.1 VM 접속</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>vagrant status
Current machine states:

fabric-1                    poweroff <span class="o">(</span>virtualbox<span class="o">)</span>

The VM is powered off. To restart the VM, simply run <span class="sb">`</span>vagrant up<span class="sb">`</span>

<span class="nv">$ </span>vagrant up fabric-1

<span class="nv">$ </span>vagrant ssh fabric-1

vagrant@fabric-1:~<span class="err">$</span>
</code></pre></div></div>

<h2 id="2-install-go">2. Install Go</h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>wget https://dl.google.com/go/go1.12.9.linux-amd64.tar.gz
<span class="nv">$ </span><span class="nb">tar </span>zxf go1.12.9.linux-amd64.tar.gz
<span class="nv">$ </span><span class="nb">sudo mv </span>go /usr/local
<span class="nv">$ </span><span class="nb">rm </span>go1.12.9.linux-amd64.tar.gz
<span class="nv">$ </span><span class="nb">sudo </span>apt-get <span class="nt">-y</span> <span class="nb">install </span>apt-transport-https ca-certificates curl software-properties-common

operties-common
Reading package lists... Done
Building dependency tree
Reading state information... Done
apt-transport-https is already the newest version <span class="o">(</span>1.2.32<span class="o">)</span><span class="nb">.</span>
ca-certificates is already the newest version <span class="o">(</span>20170717~16.04.2<span class="o">)</span><span class="nb">.</span>
curl is already the newest version <span class="o">(</span>7.47.0-1ubuntu2.13<span class="o">)</span><span class="nb">.</span>
software-properties-common is already the newest version <span class="o">(</span>0.96.20.9<span class="o">)</span><span class="nb">.</span>
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
</code></pre></div></div>

<h2 id="3-install-docker">3. Install Docker</h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>apt-get remove docker docker-engine docker.i

<span class="nv">$ </span><span class="nb">sudo </span>apt-get <span class="nb">install</span> <span class="se">\</span>
apt-transport-https <span class="se">\</span>
ca-certificates <span class="se">\</span>
curl <span class="se">\</span>
software-properties-common

<span class="nv">$ </span>curl <span class="nt">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg | <span class="nb">sudo </span>apt-key add -

<span class="nv">$ </span><span class="nb">sudo </span>add-apt-repository <span class="se">\</span>
 <span class="s2">"deb [arch=amd64] https://download.docker.com/linux/ubuntu </span><span class="se">\</span><span class="s2">
 </span><span class="si">$(</span>lsb_release <span class="nt">-cs</span><span class="si">)</span><span class="s2"> </span><span class="se">\</span><span class="s2">
 stable"</span>
 
<span class="nv">$ </span><span class="nb">sudo </span>apt-get update
<span class="nv">$ </span><span class="nb">sudo </span>apt-get <span class="nb">install </span>docker-ce
<span class="nv">$ </span><span class="nb">sudo </span>usermod <span class="nt">-a</span> <span class="nt">-G</span> docker vagrant

<span class="nv">$ </span>docker version

Client: Docker Engine - Community
 Version:           19.03.4
 API version:       1.40
 Go version:        go1.12.10
 Git commit:        9013bf583a
 Built:             Fri Oct 18 15:53:51 2019
 OS/Arch:           linux/amd64
 Experimental:      <span class="nb">false

</span>Server: Docker Engine - Community
 Engine:
  Version:          19.03.4
  API version:      1.40 <span class="o">(</span>minimum version 1.12<span class="o">)</span>
  Go version:       go1.12.10
  Git commit:       9013bf583a
  Built:            Fri Oct 18 15:52:23 2019
  OS/Arch:          linux/amd64
  Experimental:     <span class="nb">false
 </span>containerd:
  Version:          1.2.10
  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339
 runc:
  Version:          1.0.0-rc8+dev
  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657
 docker-init:
  Version:          0.18.0
  GitCommit:        fec3683
</code></pre></div></div>

<h2 id="4-install-docker-compose">4. Install Docker Compose</h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>curl <span class="nt">-L</span> https://github.com/docker/compose/releases/download/1.23.2/docker-compose-<span class="sb">`</span><span class="nb">uname</span> <span class="nt">-s</span><span class="sb">`</span>-<span class="sb">`</span><span class="nb">uname</span> <span class="nt">-m</span><span class="sb">`</span> <span class="nt">-o</span> /usr/local/bin/docker-compose

<span class="nv">$ </span><span class="nb">sudo chmod</span> +x /usr/local/bin/docker-compose

<span class="nv">$ </span>docker-compose <span class="nt">--version</span>
docker-compose version 1.23.2, build 1110ad01
</code></pre></div></div>

<h2 id="5-install-hyperledger-fabric-samples">5. Install Hyperledger Fabric Samples</h2>

<p>네트워크 구성에 필요한 바이너리 파일 및 docker images를 다운받습니다. 밑에 로그를 확인해보면 peer, ordererd와 같은 이미지를 다운받는걸 알 수 있습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl <span class="nt">-sSL</span> http://bit.ly/2ysbOFE | bash <span class="nt">-s</span> <span class="nt">--</span> 1.4.3 1.4.3 0.4.15

Installing Hyperledger Fabric docker images

<span class="o">===&gt;</span> Pulling fabric Images
<span class="o">==&gt;</span> FABRIC IMAGE: peer

1.4.3: Pulling from hyperledger/fabric-peer

Digest: sha256:fc11964a5201fc559bcee573e601753bf6218e35ded2f5259d86bc73cdc38976
Status: Downloaded newer image <span class="k">for </span>hyperledger/fabric-peer:1.4.3
docker.io/hyperledger/fabric-peer:1.4.3
<span class="o">==&gt;</span> FABRIC IMAGE: orderer

1.4.3: Pulling from hyperledger/fabric-orderer

Digest: sha256:efbcd38e7a09066621a16e6da0e35329c02c3491046538cfd1107a96f0c750cf
Status: Downloaded newer image <span class="k">for </span>hyperledger/fabric-orderer:1.4.3
docker.io/hyperledger/fabric-orderer:1.4.3
<span class="o">==&gt;</span> FABRIC IMAGE: ccenv

1.4.3: Pulling from hyperledger/fabric-ccenv

Digest: sha256:33068b526a06eea57e131a86472f1117d8d525245ff7b66d436b18a5a53dbb4e
Status: Downloaded newer image <span class="k">for </span>hyperledger/fabric-ccenv:1.4.3
docker.io/hyperledger/fabric-ccenv:1.4.3
<span class="o">==&gt;</span> FABRIC IMAGE: tools

1.4.3: Pulling from hyperledger/fabric-tools

Digest: sha256:eda7bc6d79d55bcbae248333f3275c46f57ccab610251b55f8e6845ebe8fcf52
Status: Downloaded newer image <span class="k">for </span>hyperledger/fabric-tools:1.4.3
docker.io/hyperledger/fabric-tools:1.4.3
<span class="o">==&gt;</span> FABRIC IMAGE: baseos

Error response from daemon: manifest <span class="k">for </span>hyperledger/fabric-baseos:1.4.3 not found: manifest unknown: manifest unknown
Error response from daemon: No such image: hyperledger/fabric-baseos:1.4.3
<span class="o">==&gt;</span> FABRIC IMAGE: nodeenv

Error response from daemon: manifest <span class="k">for </span>hyperledger/fabric-nodeenv:1.4.3 not found: manifest unknown: manifest unknown
Error response from daemon: No such image: hyperledger/fabric-nodeenv:1.4.3
<span class="o">==&gt;</span> FABRIC IMAGE: javaenv

Error response from daemon: Get https://registry-1.docker.io/v2/: net/http: TLS handshake <span class="nb">timeout
</span>Error response from daemon: No such image: hyperledger/fabric-javaenv:1.4.3
<span class="o">===&gt;</span> Pulling fabric ca Image
<span class="o">==&gt;</span> FABRIC CA IMAGE

1.4.3: Pulling from hyperledger/fabric-ca

Digest: sha256:82a7f653ed0de520bf3ee565a07a76aac8b91ed80869b33dddfec39652c9d183
Status: Downloaded newer image <span class="k">for </span>hyperledger/fabric-ca:1.4.3
docker.io/hyperledger/fabric-ca:1.4.3
<span class="o">===&gt;</span> Pulling thirdparty docker images
<span class="o">==&gt;</span> THIRDPARTY DOCKER IMAGE: couchdb

0.4.15: Pulling from hyperledger/fabric-couchdb

Digest: sha256:f6c724592abf9c2b35d2f4cd6a7afcde9c1052cfed61560b20ef9e2e927d1790
Status: Downloaded newer image <span class="k">for </span>hyperledger/fabric-couchdb:0.4.15
docker.io/hyperledger/fabric-couchdb:0.4.15
<span class="o">==&gt;</span> THIRDPARTY DOCKER IMAGE: kafka

0.4.15: Pulling from hyperledger/fabric-kafka

Digest: sha256:62418a885c291830510379d9eb09fbdd3d397052d916ed877a468b0e2026b9e3
Status: Downloaded newer image <span class="k">for </span>hyperledger/fabric-kafka:0.4.15
docker.io/hyperledger/fabric-kafka:0.4.15
<span class="o">==&gt;</span> THIRDPARTY DOCKER IMAGE: zookeeper

0.4.15: Pulling from hyperledger/fabric-zookeeper


<span class="o">===&gt;</span> List out hyperledger docker images
hyperledger/fabric-tools       1.4.3               18ed4db0cd57        7 weeks ago         1.55GB
hyperledger/fabric-tools       latest              18ed4db0cd57        7 weeks ago         1.55GB
hyperledger/fabric-ca          1.4.3               c18a0d3cc958        7 weeks ago         253MB
hyperledger/fabric-ca          latest              c18a0d3cc958        7 weeks ago         253MB
hyperledger/fabric-ccenv       1.4.3               3d31661a812a        7 weeks ago         1.45GB
hyperledger/fabric-ccenv       latest              3d31661a812a        7 weeks ago         1.45GB
hyperledger/fabric-orderer     1.4.3               b666a6ebbe09        7 weeks ago         173MB
hyperledger/fabric-orderer     latest              b666a6ebbe09        7 weeks ago         173MB
hyperledger/fabric-peer        1.4.3               fa87ccaed0ef        7 weeks ago         179MB
hyperledger/fabric-peer        latest              fa87ccaed0ef        7 weeks ago         179MB
hyperledger/fabric-zookeeper   0.4.15              20c6045930c8        7 months ago        1.43GB
hyperledger/fabric-zookeeper   latest              20c6045930c8        7 months ago        1.43GB
hyperledger/fabric-kafka       0.4.15              b4ab82bbaf2f        7 months ago        1.44GB
hyperledger/fabric-kafka       latest              b4ab82bbaf2f        7 months ago        1.44GB
hyperledger/fabric-couchdb     0.4.15              8de128a55539        7 months ago        1.5GB
hyperledger/fabric-couchdb     latest              8de128a55539        7 months ago        1.5GB

vagrant@fabric-1:~<span class="nv">$ </span><span class="nb">ls
</span>fabric-samples

<span class="nv">$ </span><span class="nb">chown</span> <span class="nt">-R</span> vagrant:vagrant fabric-samples
</code></pre></div></div>

<h1 id="handson">HandsOn</h1>

<h2 id="generate-network-artifacts">Generate Network Artifacts</h2>

<p>fabric-samples에 first-network로 이동해줍니다. 해당 디렉토리에는 아래와 같은 파일들이 있습니다. 저희들은 여기서 byfn.sh 파일을 사용하겠습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd </span>fabric-samples/first-network/
vagrant@fabric-1:~/fabric-samples/first-network<span class="nv">$ </span><span class="nb">ls
</span>base               configtx.yaml            docker-compose-couch-org3.yaml    eyfn.sh
byfn.sh            connection-org3.json     docker-compose-couch.yaml         org3-artifacts
ccp-generate.sh    connection-org3.yaml     docker-compose-e2e-template.yaml  README.md
ccp-template.json  crypto-config.yaml       docker-compose-etcdraft2.yaml     scripts
ccp-template.yaml  docker-compose-ca.yaml   docker-compose-kafka.yaml
channel-artifacts  docker-compose-cli.yaml  docker-compose-org3.yaml
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">./byfn.sh generate</code>를 입력해줍니다. 로그는 아래에서 확인해보면 됩니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./byfn.sh generate
Generating certs and genesis block <span class="k">for </span>channel <span class="s1">'mychannel'</span> with CLI <span class="nb">timeout </span>of <span class="s1">'10'</span> seconds and CLI delay of <span class="s1">'3'</span> seconds
Continue? <span class="o">[</span>Y/n] y
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">byfn.sh</code> 을 <code class="language-plaintext highlighter-rouge">generate</code> 하게 되면 제일 먼저 org1과 org2의 crypto-config가 만들어집니다. 이 디렉토리는 각각의 <code class="language-plaintext highlighter-rouge">peer</code> 과 <code class="language-plaintext highlighter-rouge">orderer가</code> 서로 통신할 때 사용하는 키와 인증서가 만들어집니다. 실제로 진행을 시키고 나면 <code class="language-plaintext highlighter-rouge">crypto-config</code> 파일이 만들어져있습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls
</span>base                  connection-org2.yaml              docker-compose-e2e.yaml
byfn.sh               connection-org3.json              docker-compose-etcdraft2.yaml
ccp-generate.sh       connection-org3.yaml              docker-compose-kafka.yaml
ccp-template.json     crypto-config                     docker-compose-org3.yaml
ccp-template.yaml     crypto-config.yaml                eyfn.sh
channel-artifacts     docker-compose-ca.yaml            org3-artifacts
configtx.yaml         docker-compose-cli.yaml           README.md
connection-org1.json  docker-compose-couch-org3.yaml    scripts
connection-org1.yaml  docker-compose-couch.yaml
connection-org2.json  docker-compose-e2e-template.yaml
</code></pre></div></div>

<p>crypto-config 디렉토리를 간략하게 보면 다음과 같습니다. 궁금하실 수도 있어서 참고로 올려놓겠습니다.</p>

<p><img src="https://user-images.githubusercontent.com/44635266/67212726-bce58000-f457-11e9-9574-5c94350a9137.png" alt="스크린샷 2019-10-21 오후 11 07 56" /></p>

<p><img src="https://user-images.githubusercontent.com/44635266/67212727-bce58000-f457-11e9-8cce-6a62544d74b7.png" alt="스크린샷 2019-10-21 오후 11 08 03" /></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>proceeding ...
/home/vagrant/fabric-samples/first-network/../bin/cryptogen

<span class="c">##########################################################</span>
<span class="c">##### Generate certificates using cryptogen tool #########</span>
<span class="c">##########################################################</span>
+ cryptogen generate <span class="nt">--config</span><span class="o">=</span>./crypto-config.yaml
org1.example.com
org2.example.com
+ <span class="nv">res</span><span class="o">=</span>0
+ <span class="nb">set</span> +x
</code></pre></div></div>

<p>그리고 <code class="language-plaintext highlighter-rouge">channel-artifacts</code> 디렉토리 안에 <code class="language-plaintext highlighter-rouge">genesis.block</code>, <code class="language-plaintext highlighter-rouge">channel.tx</code>, <code class="language-plaintext highlighter-rouge">Org1MSPanchors.tx</code>, <code class="language-plaintext highlighter-rouge">Org2MSPanchors.tx</code> 4가지 파일이 만들어집니다.</p>

<p><code class="language-plaintext highlighter-rouge">제네시스 블록(genesis block)</code>은 블록체인에서 생성된 첫 번째 블록을 말한다. 첫 번째 블록이 생성된 이후에 다음 블록이 지속적으로 생성되어 마치 체인처럼 이전 블록에 연결되기 때문에, 제네시스 블록이 생성되었다는 것은 해당 블록체인 네트워크가 시작되었다고 생각하면 됩니다.</p>

<p><code class="language-plaintext highlighter-rouge">channel.tx</code>, <code class="language-plaintext highlighter-rouge">Org1MSPanchors.tx</code>, <code class="language-plaintext highlighter-rouge">Org2MSPanchors.tx</code>는 각각 채널의 대한 정보와 1번째 조직과 2번째 조직에 <code class="language-plaintext highlighter-rouge">AnchorPeer</code>의 정보를 담는 트랜잭션입니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Generate CCP files <span class="k">for </span>Org1 and Org2
/home/vagrant/fabric-samples/first-network/../bin/configtxgen
<span class="c">##########################################################</span>
<span class="c">#########  Generating Orderer Genesis block ##############</span>
<span class="c">##########################################################</span>
<span class="nv">CONSENSUS_TYPE</span><span class="o">=</span>solo
+ <span class="s1">'['</span> solo <span class="o">==</span> solo <span class="s1">']'</span>
+ configtxgen <span class="nt">-profile</span> TwoOrgsOrdererGenesis <span class="nt">-channelID</span> byfn-sys-channel <span class="nt">-outputBlock</span> ./channel-artifacts/genesis.block
2019-10-21 14:04:28.604 UTC <span class="o">[</span>common.tools.configtxgen] main -&gt; INFO 001 Loading configuration
2019-10-21 14:04:28.678 UTC <span class="o">[</span>common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 002 orderer <span class="nb">type</span>: solo
2019-10-21 14:04:28.679 UTC <span class="o">[</span>common.tools.configtxgen.localconfig] Load -&gt; INFO 003 Loaded configuration: /home/vagrant/fabric-samples/first-network/configtx.yaml
2019-10-21 14:04:28.752 UTC <span class="o">[</span>common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 004 orderer <span class="nb">type</span>: solo
2019-10-21 14:04:28.752 UTC <span class="o">[</span>common.tools.configtxgen.localconfig] LoadTopLevel -&gt; INFO 005 Loaded configuration: /home/vagrant/fabric-samples/first-network/configtx.yaml
2019-10-21 14:04:28.754 UTC <span class="o">[</span>common.tools.configtxgen] doOutputBlock -&gt; INFO 006 Generating genesis block
2019-10-21 14:04:28.755 UTC <span class="o">[</span>common.tools.configtxgen] doOutputBlock -&gt; INFO 007 Writing genesis block
+ <span class="nv">res</span><span class="o">=</span>0
+ <span class="nb">set</span> +x

<span class="c">#################################################################</span>
<span class="c">### Generating channel configuration transaction 'channel.tx' ###</span>
<span class="c">#################################################################</span>
+ configtxgen <span class="nt">-profile</span> TwoOrgsChannel <span class="nt">-outputCreateChannelTx</span> ./channel-artifacts/channel.tx <span class="nt">-channelID</span> mychannel
2019-10-21 14:04:28.792 UTC <span class="o">[</span>common.tools.configtxgen] main -&gt; INFO 001 Loading configuration
2019-10-21 14:04:28.888 UTC <span class="o">[</span>common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: /home/vagrant/fabric-samples/first-network/configtx.yaml
2019-10-21 14:04:28.971 UTC <span class="o">[</span>common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 003 orderer <span class="nb">type</span>: solo
2019-10-21 14:04:28.971 UTC <span class="o">[</span>common.tools.configtxgen.localconfig] LoadTopLevel -&gt; INFO 004 Loaded configuration: /home/vagrant/fabric-samples/first-network/configtx.yaml
2019-10-21 14:04:28.972 UTC <span class="o">[</span>common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 005 Generating new channel configtx
2019-10-21 14:04:28.974 UTC <span class="o">[</span>common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 006 Writing new channel tx
+ <span class="nv">res</span><span class="o">=</span>0
+ <span class="nb">set</span> +x

<span class="c">#################################################################</span>
<span class="c">#######    Generating anchor peer update for Org1MSP   ##########</span>
<span class="c">#################################################################</span>
+ configtxgen <span class="nt">-profile</span> TwoOrgsChannel <span class="nt">-outputAnchorPeersUpdate</span> ./channel-artifacts/Org1MSPanchors.tx <span class="nt">-channelID</span> mychannel <span class="nt">-asOrg</span> Org1MSP
2019-10-21 14:04:29.008 UTC <span class="o">[</span>common.tools.configtxgen] main -&gt; INFO 001 Loading configuration
2019-10-21 14:04:29.093 UTC <span class="o">[</span>common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: /home/vagrant/fabric-samples/first-network/configtx.yaml
2019-10-21 14:04:29.170 UTC <span class="o">[</span>common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 003 orderer <span class="nb">type</span>: solo
2019-10-21 14:04:29.171 UTC <span class="o">[</span>common.tools.configtxgen.localconfig] LoadTopLevel -&gt; INFO 004 Loaded configuration: /home/vagrant/fabric-samples/first-network/configtx.yaml
2019-10-21 14:04:29.171 UTC <span class="o">[</span>common.tools.configtxgen] doOutputAnchorPeersUpdate -&gt; INFO 005 Generating anchor peer update
2019-10-21 14:04:29.171 UTC <span class="o">[</span>common.tools.configtxgen] doOutputAnchorPeersUpdate -&gt; INFO 006 Writing anchor peer update
+ <span class="nv">res</span><span class="o">=</span>0
+ <span class="nb">set</span> +x

<span class="c">#################################################################</span>
<span class="c">#######    Generating anchor peer update for Org2MSP   ##########</span>
<span class="c">#################################################################</span>
+ configtxgen <span class="nt">-profile</span> TwoOrgsChannel <span class="nt">-outputAnchorPeersUpdate</span> ./channel-artifacts/Org2MSPanchors.tx <span class="nt">-channelID</span> mychannel <span class="nt">-asOrg</span> Org2MSP
2019-10-21 14:04:29.203 UTC <span class="o">[</span>common.tools.configtxgen] main -&gt; INFO 001 Loading configuration
2019-10-21 14:04:29.273 UTC <span class="o">[</span>common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: /home/vagrant/fabric-samples/first-network/configtx.yaml
2019-10-21 14:04:29.342 UTC <span class="o">[</span>common.tools.configtxgen.localconfig] completeInitialization -&gt; INFO 003 orderer <span class="nb">type</span>: solo
2019-10-21 14:04:29.343 UTC <span class="o">[</span>common.tools.configtxgen.localconfig] LoadTopLevel -&gt; INFO 004 Loaded configuration: /home/vagrant/fabric-samples/first-network/configtx.yaml
2019-10-21 14:04:29.343 UTC <span class="o">[</span>common.tools.configtxgen] doOutputAnchorPeersUpdate -&gt; INFO 005 Generating anchor peer update
2019-10-21 14:04:29.343 UTC <span class="o">[</span>common.tools.configtxgen] doOutputAnchorPeersUpdate -&gt; INFO 006 Writing anchor peer update
+ <span class="nv">res</span><span class="o">=</span>0
+ <span class="nb">set</span> +x
</code></pre></div></div>

<h2 id="bring-up-the-network">Bring Up the Network</h2>

<p>그 다음으로는 <code class="language-plaintext highlighter-rouge">./byfn.sh up</code> 명령어로 네트워크를 실행 시킵니다. byfn을 실행시키면 엄청 많은 과정이 진행되니까 하나하나 뜯어서 살펴보겠습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./byfn.sh up

Starting <span class="k">for </span>channel <span class="s1">'mychannel'</span> with CLI <span class="nb">timeout </span>of <span class="s1">'10'</span> seconds and CLI delay of <span class="s1">'3'</span> seconds
Continue? <span class="o">[</span>Y/n] y
proceeding ...
<span class="nv">LOCAL_VERSION</span><span class="o">=</span>1.4.3
<span class="nv">DOCKER_IMAGE_VERSION</span><span class="o">=</span>1.4.3
Creating network <span class="s2">"net_byfn"</span> with the default driver
Creating volume <span class="s2">"net_orderer.example.com"</span> with default driver
Creating volume <span class="s2">"net_peer0.org1.example.com"</span> with default driver
Creating volume <span class="s2">"net_peer1.org1.example.com"</span> with default driver
Creating volume <span class="s2">"net_peer0.org2.example.com"</span> with default driver
Creating volume <span class="s2">"net_peer1.org2.example.com"</span> with default driver
Creating orderer.example.com    ... <span class="k">done
</span>Creating peer1.org2.example.com ... <span class="k">done
</span>Creating peer0.org2.example.com ... <span class="k">done
</span>Creating peer1.org1.example.com ... <span class="k">done
</span>Creating peer0.org1.example.com ... <span class="k">done
</span>Creating cli                    ... <span class="k">done
</span>CONTAINER ID        IMAGE                               COMMAND             CREATED                  STATUS                  PORTS                      NAMES
a6bc396e9eb4        hyperledger/fabric-tools:latest     <span class="s2">"/bin/bash"</span>         Less than a second ago   Up Less than a second                              cli
964870f62a62        hyperledger/fabric-peer:latest      <span class="s2">"peer node start"</span>   4 seconds ago            Up 1 second             0.0.0.0:8051-&gt;8051/tcp     peer1.org1.example.com
01cd5cc6dc85        hyperledger/fabric-peer:latest      <span class="s2">"peer node start"</span>   4 seconds ago            Up 1 second             0.0.0.0:7051-&gt;7051/tcp     peer0.org1.example.com
cc1323d17f4a        hyperledger/fabric-peer:latest      <span class="s2">"peer node start"</span>   4 seconds ago            Up 1 second             0.0.0.0:9051-&gt;9051/tcp     peer0.org2.example.com
9897b1ed790c        hyperledger/fabric-peer:latest      <span class="s2">"peer node start"</span>   4 seconds ago            Up Less than a second   0.0.0.0:10051-&gt;10051/tcp   peer1.org2.example.com
85ce288db191        hyperledger/fabric-orderer:latest   <span class="s2">"orderer"</span>           4 seconds ago            Up 2 seconds            0.0.0.0:7050-&gt;7050/tcp     orderer.example.com

 ____    _____      _      ____    _____
/ ___|  |_   _|    / <span class="se">\ </span>   |  _ <span class="se">\ </span> |_   _|
<span class="se">\_</span>__ <span class="se">\ </span>   | |     / _ <span class="se">\ </span>  | |_<span class="o">)</span> |   | |
 ___<span class="o">)</span> |   | |    / ___ <span class="se">\ </span> |  _ &lt;    | |
|____/    |_|   /_/   <span class="se">\_\ </span>|_| <span class="se">\_\ </span>  |_|

Build your first network <span class="o">(</span>BYFN<span class="o">)</span> end-to-end <span class="nb">test</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">docker-compose-cli.yaml</code> 파일에 설정되어 있는 서비스를 실행시킵니다. <code class="language-plaintext highlighter-rouge">docker-compose-cli.yaml</code> 파일을 가져와서 이해를 쉽게 하도록 돕겠습니다. <code class="language-plaintext highlighter-rouge">service</code>에 <code class="language-plaintext highlighter-rouge">orderer.example.com</code>, <code class="language-plaintext highlighter-rouge">peer0.example.com</code> 등등 정상적으로 컨테이너에 올라가는 모습을 확인할 수 있습니다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Copyright IBM Corp. All Rights Reserved.</span>
<span class="c1">#</span>
<span class="c1"># SPDX-License-Identifier: Apache-2.0</span>
<span class="c1">#</span>

<span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">2'</span>

<span class="na">volumes</span><span class="pi">:</span>
  <span class="s">orderer.example.com</span><span class="pi">:</span>
  <span class="s">peer0.org1.example.com</span><span class="pi">:</span>
  <span class="s">peer1.org1.example.com</span><span class="pi">:</span>
  <span class="s">peer0.org2.example.com</span><span class="pi">:</span>
  <span class="s">peer1.org2.example.com</span><span class="pi">:</span>

<span class="na">networks</span><span class="pi">:</span>
  <span class="na">byfn</span><span class="pi">:</span>

<span class="na">services</span><span class="pi">:</span>

  <span class="s">orderer.example.com</span><span class="pi">:</span>
    <span class="na">extends</span><span class="pi">:</span>
      <span class="na">file</span><span class="pi">:</span>   <span class="s">base/docker-compose-base.yaml</span>
      <span class="na">service</span><span class="pi">:</span> <span class="s">orderer.example.com</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">orderer.example.com</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">byfn</span>

  <span class="s">peer0.org1.example.com</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">peer0.org1.example.com</span>
    <span class="na">extends</span><span class="pi">:</span>
      <span class="na">file</span><span class="pi">:</span>  <span class="s">base/docker-compose-base.yaml</span>
      <span class="na">service</span><span class="pi">:</span> <span class="s">peer0.org1.example.com</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">byfn</span>

  <span class="s">peer1.org1.example.com</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">peer1.org1.example.com</span>
    <span class="na">extends</span><span class="pi">:</span>
      <span class="na">file</span><span class="pi">:</span>  <span class="s">base/docker-compose-base.yaml</span>
      <span class="na">service</span><span class="pi">:</span> <span class="s">peer1.org1.example.com</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">byfn</span>

  <span class="s">peer0.org2.example.com</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">peer0.org2.example.com</span>
    <span class="na">extends</span><span class="pi">:</span>
      <span class="na">file</span><span class="pi">:</span>  <span class="s">base/docker-compose-base.yaml</span>
      <span class="na">service</span><span class="pi">:</span> <span class="s">peer0.org2.example.com</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">byfn</span>

  <span class="s">peer1.org2.example.com</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">peer1.org2.example.com</span>
    <span class="na">extends</span><span class="pi">:</span>
      <span class="na">file</span><span class="pi">:</span>  <span class="s">base/docker-compose-base.yaml</span>
      <span class="na">service</span><span class="pi">:</span> <span class="s">peer1.org2.example.com</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">byfn</span>

  <span class="na">cli</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">cli</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">hyperledger/fabric-tools:$IMAGE_TAG</span>
    <span class="na">tty</span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">stdin_open</span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">SYS_CHANNEL=$SYS_CHANNEL</span>
      <span class="pi">-</span> <span class="s">GOPATH=/opt/gopath</span>
      <span class="pi">-</span> <span class="s">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span>
      <span class="c1">#- FABRIC_LOGGING_SPEC=DEBUG</span>
      <span class="pi">-</span> <span class="s">FABRIC_LOGGING_SPEC=INFO</span>
      <span class="pi">-</span> <span class="s">CORE_PEER_ID=cli</span>
      <span class="pi">-</span> <span class="s">CORE_PEER_ADDRESS=peer0.org1.example.com:7051</span>
      <span class="pi">-</span> <span class="s">CORE_PEER_LOCALMSPID=Org1MSP</span>
      <span class="pi">-</span> <span class="s">CORE_PEER_TLS_ENABLED=true</span>
      <span class="pi">-</span> <span class="s">CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt</span>
      <span class="pi">-</span> <span class="s">CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key</span>
      <span class="pi">-</span> <span class="s">CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span>
      <span class="pi">-</span> <span class="s">CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span>
    <span class="na">working_dir</span><span class="pi">:</span> <span class="s">/opt/gopath/src/github.com/hyperledger/fabric/peer</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s">/bin/bash</span>
    <span class="na">volumes</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">/var/run/:/host/var/run/</span>
        <span class="pi">-</span> <span class="s">./../chaincode/:/opt/gopath/src/github.com/chaincode</span>
        <span class="pi">-</span> <span class="s">./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/</span>
        <span class="pi">-</span> <span class="s">./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/</span>
        <span class="pi">-</span> <span class="s">./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">orderer.example.com</span>
      <span class="pi">-</span> <span class="s">peer0.org1.example.com</span>
      <span class="pi">-</span> <span class="s">peer1.org1.example.com</span>
      <span class="pi">-</span> <span class="s">peer0.org2.example.com</span>
      <span class="pi">-</span> <span class="s">peer1.org2.example.com</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">byfn</span>
</code></pre></div></div>

<p>다음은 모든 <code class="language-plaintext highlighter-rouge">peer</code>들이 들어갈 수 있는 채널을 만들어줍니다. <code class="language-plaintext highlighter-rouge">peer</code>들은 하나의 <code class="language-plaintext highlighter-rouge">node</code>라고 보셔도 무방합니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+ peer channel create <span class="nt">-o</span> orderer.example.com:7050 <span class="nt">-c</span> mychannel <span class="nt">-f</span>

./channel-artifacts/channel.tx <span class="nt">--tls</span> <span class="nb">true</span> <span class="nt">--cafile</span> /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
Channel name : mychannel
Creating channel...
+ <span class="nv">res</span><span class="o">=</span>0
+ <span class="nb">set</span> +x
2019-10-21 14:23:54.000 UTC <span class="o">[</span>channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized
2019-10-21 14:23:54.028 UTC <span class="o">[</span>cli.common] readBlock -&gt; INFO 002 Received block: 0
<span class="o">=====================</span> Channel <span class="s1">'mychannel'</span> created <span class="o">=====================</span>
</code></pre></div></div>

<p>각각의 <code class="language-plaintext highlighter-rouge">peer</code>들을 <code class="language-plaintext highlighter-rouge">mychannel</code>에 조인시켜줍니다. 만들어진 <code class="language-plaintext highlighter-rouge">peer</code>는 총 4개로 <code class="language-plaintext highlighter-rouge">peer0.org1.example.com</code>, <code class="language-plaintext highlighter-rouge">peer1.org1.example.com</code>, <code class="language-plaintext highlighter-rouge">peer0.org2.example.com</code>, <code class="language-plaintext highlighter-rouge">peer1.org2.example.com</code> 이란 이름을 가지고 있습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Having all peers <span class="nb">join </span>the channel...
+ peer channel <span class="nb">join</span> <span class="nt">-b</span> mychannel.block
+ <span class="nv">res</span><span class="o">=</span>0
+ <span class="nb">set</span> +x
2019-10-21 14:23:54.084 UTC <span class="o">[</span>channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized
2019-10-21 14:23:54.110 UTC <span class="o">[</span>channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to <span class="nb">join </span>channel
<span class="o">=====================</span> peer0.org1 joined channel <span class="s1">'mychannel'</span> <span class="o">=====================</span>

+ peer channel <span class="nb">join</span> <span class="nt">-b</span> mychannel.block
+ <span class="nv">res</span><span class="o">=</span>0
+ <span class="nb">set</span> +x
2019-10-21 14:23:57.167 UTC <span class="o">[</span>channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized
2019-10-21 14:23:57.193 UTC <span class="o">[</span>channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to <span class="nb">join </span>channel
<span class="o">=====================</span> peer1.org1 joined channel <span class="s1">'mychannel'</span> <span class="o">=====================</span>

+ peer channel <span class="nb">join</span> <span class="nt">-b</span> mychannel.block
+ <span class="nv">res</span><span class="o">=</span>0
+ <span class="nb">set</span> +x
2019-10-21 14:24:00.255 UTC <span class="o">[</span>channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized
2019-10-21 14:24:00.283 UTC <span class="o">[</span>channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to <span class="nb">join </span>channel
<span class="o">=====================</span> peer0.org2 joined channel <span class="s1">'mychannel'</span> <span class="o">=====================</span>

+ peer channel <span class="nb">join</span> <span class="nt">-b</span> mychannel.block
+ <span class="nv">res</span><span class="o">=</span>0
+ <span class="nb">set</span> +x
2019-10-21 14:24:03.340 UTC <span class="o">[</span>channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized
2019-10-21 14:24:03.362 UTC <span class="o">[</span>channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to <span class="nb">join </span>channel
<span class="o">=====================</span> peer1.org2 joined channel <span class="s1">'mychannel'</span> <span class="o">=====================</span>
</code></pre></div></div>

<p>다음 각각의 Organization에서 첫 번째 <code class="language-plaintext highlighter-rouge">peer</code>를 <code class="language-plaintext highlighter-rouge">Anchor Peer</code>로 업데이트합니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Updating anchor peers <span class="k">for </span>org1...
+ peer channel update <span class="nt">-o</span> orderer.example.com:7050 <span class="nt">-c</span> mychannel <span class="nt">-f</span> ./channel-artifacts/Org1MSPanchors.tx <span class="nt">--tls</span> <span class="nb">true</span> <span class="nt">--cafile</span> /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
+ <span class="nv">res</span><span class="o">=</span>0
+ <span class="nb">set</span> +x
2019-10-21 14:24:06.418 UTC <span class="o">[</span>channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized
2019-10-21 14:24:06.432 UTC <span class="o">[</span>channelCmd] update -&gt; INFO 002 Successfully submitted channel update
<span class="o">=====================</span> Anchor peers updated <span class="k">for </span>org <span class="s1">'Org1MSP'</span> on channel <span class="s1">'mychannel'</span> <span class="o">=====================</span>

Updating anchor peers <span class="k">for </span>org2...
+ peer channel update <span class="nt">-o</span> orderer.example.com:7050 <span class="nt">-c</span> mychannel <span class="nt">-f</span> ./channel-artifacts/Org2MSPanchors.tx <span class="nt">--tls</span> <span class="nb">true</span> <span class="nt">--cafile</span> /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
+ <span class="nv">res</span><span class="o">=</span>0
+ <span class="nb">set</span> +x
2019-10-21 14:24:09.490 UTC <span class="o">[</span>channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized
2019-10-21 14:24:09.506 UTC <span class="o">[</span>channelCmd] update -&gt; INFO 002 Successfully submitted channel update
<span class="o">=====================</span> Anchor peers updated <span class="k">for </span>org <span class="s1">'Org2MSP'</span> on channel <span class="s1">'mychannel'</span> <span class="o">=====================</span>
</code></pre></div></div>

<p>다음 <code class="language-plaintext highlighter-rouge">peer</code>들에게 원장에 내용을 기록하게 만들 수 있는 <code class="language-plaintext highlighter-rouge">chaincode</code>를 설치합니다. 후에 이 <code class="language-plaintext highlighter-rouge">chaincode</code>돌려서 가상의 거래를 실행해볼것입니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Installing chaincode on peer0.org1...
+ peer chaincode <span class="nb">install</span> <span class="nt">-n</span> mycc <span class="nt">-v</span> 1.0 <span class="nt">-l</span> golang <span class="nt">-p</span> github.com/chaincode/chaincode_example02/go/
+ <span class="nv">res</span><span class="o">=</span>0
+ <span class="nb">set</span> +x
2019-10-21 14:24:12.567 UTC <span class="o">[</span>chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 001 Using default escc
2019-10-21 14:24:12.567 UTC <span class="o">[</span>chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default vscc
2019-10-21 14:24:12.965 UTC <span class="o">[</span>chaincodeCmd] <span class="nb">install</span> -&gt; INFO 003 Installed remotely response:&lt;status:200 payload:<span class="s2">"OK"</span> <span class="o">&gt;</span>
<span class="o">=====================</span> Chaincode is installed on peer0.org1 <span class="o">=====================</span>

Install chaincode on peer0.org2...
+ peer chaincode <span class="nb">install</span> <span class="nt">-n</span> mycc <span class="nt">-v</span> 1.0 <span class="nt">-l</span> golang <span class="nt">-p</span> github.com/chaincode/chaincode_example02/go/
+ <span class="nv">res</span><span class="o">=</span>0
+ <span class="nb">set</span> +x
2019-10-21 14:24:13.009 UTC <span class="o">[</span>chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 001 Using default escc
2019-10-21 14:24:13.009 UTC <span class="o">[</span>chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default vscc
2019-10-21 14:24:13.110 UTC <span class="o">[</span>chaincodeCmd] <span class="nb">install</span> -&gt; INFO 003 Installed remotely response:&lt;status:200 payload:<span class="s2">"OK"</span> <span class="o">&gt;</span>
<span class="o">=====================</span> Chaincode is installed on peer0.org2 <span class="o">=====================</span>

Instantiating chaincode on peer0.org2...
+ peer chaincode instantiate <span class="nt">-o</span> orderer.example.com:7050 <span class="nt">--tls</span> <span class="nb">true</span> <span class="nt">--cafile</span> /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem <span class="nt">-C</span> mychannel <span class="nt">-n</span> mycc <span class="nt">-l</span> golang <span class="nt">-v</span> 1.0 <span class="nt">-c</span> <span class="s1">'{"Args":["init","a","100","b","200"]}'</span> <span class="nt">-P</span> <span class="s1">'AND ('</span><span class="se">\'</span><span class="s1">'Org1MSP.peer'</span><span class="se">\'</span><span class="s1">','</span><span class="se">\'</span><span class="s1">'Org2MSP.peer'</span><span class="se">\'</span><span class="s1">')'</span>
+ <span class="nv">res</span><span class="o">=</span>0
+ <span class="nb">set</span> +x
2019-10-21 14:24:13.155 UTC <span class="o">[</span>chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 001 Using default escc
2019-10-21 14:24:13.155 UTC <span class="o">[</span>chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default vscc
<span class="o">=====================</span> Chaincode is instantiated on peer0.org2 on channel <span class="s1">'mychannel'</span> <span class="o">=====================</span>
</code></pre></div></div>

<p>그리고 <code class="language-plaintext highlighter-rouge">peer0.org1.example.com</code>에서 <code class="language-plaintext highlighter-rouge">Query</code>를 돌려 자신의 자산을 확인합니다. <code class="language-plaintext highlighter-rouge">first-network</code> 에서는 A = 100, B = 200 을 초기화 시켜놓고 다음 과정에 나올 <code class="language-plaintext highlighter-rouge">Invoke</code>를 할 때마다 A에서 B로 10원씩 이동합니다. 즉 거래가 이루어진다고 보시면 됩니다.</p>

<p>맨 마지막에 체인코드를 첨부하여 확인하실 수 있게 하겠습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Querying chaincode on peer0.org1...
<span class="o">=====================</span> Querying on peer0.org1 on channel <span class="s1">'mychannel'</span>... <span class="o">=====================</span>
Attempting to Query peer0.org1 ...3 secs
+ peer chaincode query <span class="nt">-C</span> mychannel <span class="nt">-n</span> mycc <span class="nt">-c</span> <span class="s1">'{"Args":["query","a"]}'</span>
+ <span class="nv">res</span><span class="o">=</span>0
+ <span class="nb">set</span> +x

100 // A
<span class="o">=====================</span> Query successful on peer0.org1 on channel <span class="s1">'mychannel'</span> <span class="o">=====================</span>
</code></pre></div></div>

<p>위에서 같은 <code class="language-plaintext highlighter-rouge">peer chaincode query -C mychannel -n mycc -c '{"Args":["query","a"]}'</code> <code class="language-plaintext highlighter-rouge">Query</code>를 날렸을때 100을 반환했던것과는 달리 아래에서는 90을 반환하는걸 볼 수 있습니다.</p>

<p>이 과정을 통해서 fabric에서 제공하는 한 사이클을 돌리는걸 마무리했습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sending invoke transaction on peer0.org1 peer0.org2...
+ peer chaincode invoke <span class="nt">-o</span> orderer.example.com:7050 <span class="nt">--tls</span> <span class="nb">true</span> <span class="nt">--cafile</span> /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem <span class="nt">-C</span> mychannel <span class="nt">-n</span> mycc <span class="nt">--peerAddresses</span> peer0.org1.example.com:7051 <span class="nt">--tlsRootCertFiles</span> /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt <span class="nt">--peerAddresses</span> peer0.org2.example.com:9051 <span class="nt">--tlsRootCertFiles</span> /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt <span class="nt">-c</span> <span class="s1">'{"Args":["invoke","a","b","10"]}'</span>
+ <span class="nv">res</span><span class="o">=</span>0
+ <span class="nb">set</span> +x
2019-10-21 14:25:11.764 UTC <span class="o">[</span>chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200
<span class="o">=====================</span> Invoke transaction successful on peer0.org1 peer0.org2 on channel <span class="s1">'mychannel'</span> <span class="o">=====================</span>

Installing chaincode on peer1.org2...
+ peer chaincode <span class="nb">install</span> <span class="nt">-n</span> mycc <span class="nt">-v</span> 1.0 <span class="nt">-l</span> golang <span class="nt">-p</span> github.com/chaincode/chaincode_example02/go/
+ <span class="nv">res</span><span class="o">=</span>0
+ <span class="nb">set</span> +x
2019-10-21 14:25:11.823 UTC <span class="o">[</span>chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 001 Using default escc
2019-10-21 14:25:11.823 UTC <span class="o">[</span>chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default vscc
2019-10-21 14:25:11.969 UTC <span class="o">[</span>chaincodeCmd] <span class="nb">install</span> -&gt; INFO 003 Installed remotely response:&lt;status:200 payload:<span class="s2">"OK"</span> <span class="o">&gt;</span>
<span class="o">=====================</span> Chaincode is installed on peer1.org2 <span class="o">=====================</span>

Querying chaincode on peer1.org2...
<span class="o">=====================</span> Querying on peer1.org2 on channel <span class="s1">'mychannel'</span>... <span class="o">=====================</span>
Attempting to Query peer1.org2 ...3 secs
+ peer chaincode query <span class="nt">-C</span> mychannel <span class="nt">-n</span> mycc <span class="nt">-c</span> <span class="s1">'{"Args":["query","a"]}'</span>
+ <span class="nv">res</span><span class="o">=</span>0
+ <span class="nb">set</span> +x

90 // A
<span class="o">=====================</span> Query successful on peer1.org2 on channel <span class="s1">'mychannel'</span> <span class="o">=====================</span>

<span class="o">=========</span> All GOOD, BYFN execution completed <span class="o">===========</span>
</code></pre></div></div>

<p>네트워크 종료가 되고 현재 올라와있는 도커의 상태를 확인할 수 있습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> _____   _   _   ____
| ____| | <span class="se">\ </span>| | |  _ <span class="se">\</span>
|  _|   |  <span class="se">\|</span> | | | | |
| |___  | |<span class="se">\ </span> | | |_| |
|_____| |_| <span class="se">\_</span>| |____/

root@fabric-1:/home/vagrant/fabric-samples/first-network# docker ps
CONTAINER ID        IMAGE                                                                                                  COMMAND                  CREATED              STATUS              PORTS                      NAMES
eea95535a7cc        dev-peer1.org2.example.com-mycc-1.0-26c2ef32838554aac4f7ad6f100aca865e87959c9a126e86d764c8d01f8346ab   <span class="s2">"chaincode -peer.add…"</span>   36 seconds ago       Up 35 seconds                                  dev-peer1.org2.example.com-mycc-1.0
287502b12881        dev-peer0.org1.example.com-mycc-1.0-384f11f484b9302df90b453200cfb25174305fce8f53f4e94d45ee3b6cab0ce9   <span class="s2">"chaincode -peer.add…"</span>   About a minute ago   Up About a minute                              dev-peer0.org1.example.com-mycc-1.0
10b325e0dc6f        dev-peer0.org2.example.com-mycc-1.0-15b571b3ce849066b7ec74497da3b27e54e0df1345daff3951b94245ce09c42b   <span class="s2">"chaincode -peer.add…"</span>   About a minute ago   Up About a minute                              dev-peer0.org2.example.com-mycc-1.0
a6bc396e9eb4        hyperledger/fabric-tools:latest                                                                        <span class="s2">"/bin/bash"</span>              2 minutes ago        Up 2 minutes                                   cli
964870f62a62        hyperledger/fabric-peer:latest                                                                         <span class="s2">"peer node start"</span>        2 minutes ago        Up 2 minutes        0.0.0.0:8051-&gt;8051/tcp     peer1.org1.example.com
01cd5cc6dc85        hyperledger/fabric-peer:latest
</code></pre></div></div>

<p>이전과는 달리 체인코드가 3개가 추가되있는것을 보실수 있습니다.</p>

<p><code class="language-plaintext highlighter-rouge">Invoke</code>를 한번 더 날려보고 <code class="language-plaintext highlighter-rouge">Query</code>를 돌려서 결과값을 보겠습니다. 한 번더 돌리게되면 a는 80 b는 220이 되야합니다.</p>

<p>먼저 <code class="language-plaintext highlighter-rouge">cli</code>로 접속합니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker <span class="nb">exec</span> <span class="nt">-it</span> cli /bin/bash
</code></pre></div></div>

<p>그리고 <code class="language-plaintext highlighter-rouge">Invoke</code>와 <code class="language-plaintext highlighter-rouge">Query</code>를 날려볼게요.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@a6bc396e9eb4:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer chaincode invoke <span class="nt">-o</span> orderer.example.com:7050 <span class="nt">--tls</span> <span class="nb">true</span> <span class="nt">--cafile</span> /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem <span class="nt">-C</span> mychannel <span class="nt">-n</span> mycc <span class="nt">--peerAddresses</span> peer0.org1.example.com:7051 <span class="nt">--tlsRootCertFiles</span> /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt <span class="nt">--peerAddresses</span> peer0.org2.example.com:9051 <span class="nt">--tlsRootCertFiles</span> /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt <span class="nt">-c</span> <span class="s1">'{"Args":["invoke","a","b","10"]}'</span>

2019-10-21 14:47:59.734 UTC <span class="o">[</span>chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 001 Chaincode invoke successful. result: status:200

root@a6bc396e9eb4:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer chaincode query <span class="nt">-C</span> mychannel <span class="nt">-n</span> mycc <span class="nt">-c</span> <span class="s1">'{"Args":["query","a"]}'</span>
80

root@a6bc396e9eb4:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer chaincode query <span class="nt">-C</span> mychannel <span class="nt">-n</span> mycc <span class="nt">-c</span> <span class="s1">'{"Args":["query","b"]}'</span>
220

root@a6bc396e9eb4:/opt/gopath/src/github.com/hyperledger/fabric/peer#
</code></pre></div></div>

<p>위와같이 되면 네트워크가 잘 구현이된것입니다.</p>

<h2 id="bring-down-the-network">Bring Down the Network</h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./byfn.sh down

Stopping <span class="k">for </span>channel <span class="s1">'mychannel'</span> with CLI <span class="nb">timeout </span>of <span class="s1">'10'</span> seconds and CLI delay of <span class="s1">'3'</span> seconds
Continue? <span class="o">[</span>Y/n] y
proceeding ...
WARNING: The BYFN_CA1_PRIVATE_KEY variable is not set. Defaulting to a blank string.
WARNING: The BYFN_CA2_PRIVATE_KEY variable is not set. Defaulting to a blank string.
Stopping cli                    ... <span class="k">done
</span>Stopping peer1.org1.example.com ... <span class="k">done
</span>Stopping peer0.org1.example.com ... <span class="k">done
</span>Stopping peer0.org2.example.com ... <span class="k">done
</span>Stopping peer1.org2.example.com ... <span class="k">done
</span>Stopping orderer.example.com    ... <span class="k">done
</span>Removing cli                    ... <span class="k">done
</span>Removing peer1.org1.example.com ... <span class="k">done
</span>Removing peer0.org1.example.com ... <span class="k">done
</span>Removing peer0.org2.example.com ... <span class="k">done
</span>Removing peer1.org2.example.com ... <span class="k">done
</span>Removing orderer.example.com    ... <span class="k">done
</span>Removing network net_byfn
Removing volume net_orderer.example.com
Removing volume net_peer0.org1.example.com
Removing volume net_peer1.org1.example.com
Removing volume net_peer0.org2.example.com
Removing volume net_peer1.org2.example.com
Removing volume net_orderer2.example.com
WARNING: Volume net_orderer2.example.com not found.
Removing volume net_orderer3.example.com
WARNING: Volume net_orderer3.example.com not found.
Removing volume net_orderer4.example.com
WARNING: Volume net_orderer4.example.com not found.
Removing volume net_orderer5.example.com
WARNING: Volume net_orderer5.example.com not found.
Removing volume net_peer0.org3.example.com
WARNING: Volume net_peer0.org3.example.com not found.
Removing volume net_peer1.org3.example.com
WARNING: Volume net_peer1.org3.example.com not found.
eea95535a7cc
287502b12881
10b325e0dc6f
Untagged: dev-peer1.org2.example.com-mycc-1.0-26c2ef32838554aac4f7ad6f100aca865e87959c9a126e86d764c8d01f8346ab:latest
Deleted: sha256:e963251a570a754197239d14fd1d0c4340a4212d87568d47c00fed16292ca812
Deleted: sha256:f16de60844b3cf46ec680c26341ac3b3e210fc65206576534f216d8c9f457823
Deleted: sha256:6f63b8afbc4454e769950c74b4cd3a955d8794b93aff745bd5016819326045ae
Deleted: sha256:1626842065e58a30bbbab5355877ae397f7d686041a456879af9af5f5307736e
Untagged: dev-peer0.org1.example.com-mycc-1.0-384f11f484b9302df90b453200cfb25174305fce8f53f4e94d45ee3b6cab0ce9:latest
Deleted: sha256:73204622e3468ca14d4803839f73622af869661f9b5c473981f261615921699c
Deleted: sha256:125e975089bb462e317c8ebc4c2d518ac3b9af1299315ce2eb1551c21f4036c7
Deleted: sha256:0cf54547c5f086e1a94949bbd74e4f40ab55f38cacaf879508bf156745bf4307
Deleted: sha256:261656bc1ef289d10e2c02f5b869eb692c9c6df48a32645ced6fd6c9e9bd9d4a
Untagged: dev-peer0.org2.example.com-mycc-1.0-15b571b3ce849066b7ec74497da3b27e54e0df1345daff3951b94245ce09c42b:latest
Deleted: sha256:209594d56247631cf2ca3ccbd583addd1d5c12fd9c9b547e33d729e89b68d853
Deleted: sha256:ab043f74e02ccf42704f707e7f2df8e6af2994b0300e894c0f49581a20523270
Deleted: sha256:37c67e3515100c4dba5c4c694089c3a471a1f731757b61cbcfd71804a558c7dc
Deleted: sha256:35672f428af63c9f9b768412a9edec8fa3c0a27f19a43b63e584a33111ac187b
</code></pre></div></div>

<h2 id="invoke">Invoke</h2>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Transaction makes payment of X units from A to B</span>
<span class="k">func</span> <span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">SimpleChaincode</span><span class="p">)</span> <span class="n">invoke</span><span class="p">(</span><span class="n">stub</span> <span class="n">shim</span><span class="o">.</span><span class="n">ChaincodeStubInterface</span><span class="p">,</span> <span class="n">args</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="n">pb</span><span class="o">.</span><span class="n">Response</span> <span class="p">{</span>
	<span class="k">var</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span> <span class="kt">string</span>    <span class="c">// Entities</span>
	<span class="k">var</span> <span class="n">Aval</span><span class="p">,</span> <span class="n">Bval</span> <span class="kt">int</span> <span class="c">// Asset holdings</span>
	<span class="k">var</span> <span class="n">X</span> <span class="kt">int</span>          <span class="c">// Transaction value</span>
	<span class="k">var</span> <span class="n">err</span> <span class="kt">error</span>

	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">args</span><span class="p">)</span> <span class="o">!=</span> <span class="m">3</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">shim</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Incorrect number of arguments. Expecting 3"</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="n">A</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">]</span>
	<span class="n">B</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="m">1</span><span class="p">]</span>

	<span class="c">// Get the state from the ledger</span>
	<span class="c">// TODO: will be nice to have a GetAllState call to ledger</span>
	<span class="n">Avalbytes</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">stub</span><span class="o">.</span><span class="n">GetState</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">shim</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Failed to get state"</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">if</span> <span class="n">Avalbytes</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">shim</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Entity not found"</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="n">Aval</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">strconv</span><span class="o">.</span><span class="n">Atoi</span><span class="p">(</span><span class="kt">string</span><span class="p">(</span><span class="n">Avalbytes</span><span class="p">))</span>

	<span class="n">Bvalbytes</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">stub</span><span class="o">.</span><span class="n">GetState</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">shim</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Failed to get state"</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">if</span> <span class="n">Bvalbytes</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">shim</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Entity not found"</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="n">Bval</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">strconv</span><span class="o">.</span><span class="n">Atoi</span><span class="p">(</span><span class="kt">string</span><span class="p">(</span><span class="n">Bvalbytes</span><span class="p">))</span>

	<span class="c">// Perform the execution</span>
	<span class="n">X</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">strconv</span><span class="o">.</span><span class="n">Atoi</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="m">2</span><span class="p">])</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">shim</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Invalid transaction amount, expecting a integer value"</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="n">Aval</span> <span class="o">=</span> <span class="n">Aval</span> <span class="o">-</span> <span class="n">X</span>
	<span class="n">Bval</span> <span class="o">=</span> <span class="n">Bval</span> <span class="o">+</span> <span class="n">X</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Aval = %d, Bval = %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">Aval</span><span class="p">,</span> <span class="n">Bval</span><span class="p">)</span>

	<span class="c">// Write the state back to the ledger</span>
	<span class="n">err</span> <span class="o">=</span> <span class="n">stub</span><span class="o">.</span><span class="n">PutState</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">(</span><span class="n">strconv</span><span class="o">.</span><span class="n">Itoa</span><span class="p">(</span><span class="n">Aval</span><span class="p">)))</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">shim</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="n">err</span><span class="o">.</span><span class="n">Error</span><span class="p">())</span>
	<span class="p">}</span>

	<span class="n">err</span> <span class="o">=</span> <span class="n">stub</span><span class="o">.</span><span class="n">PutState</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">(</span><span class="n">strconv</span><span class="o">.</span><span class="n">Itoa</span><span class="p">(</span><span class="n">Bval</span><span class="p">)))</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">shim</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="n">err</span><span class="o">.</span><span class="n">Error</span><span class="p">())</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="n">shim</span><span class="o">.</span><span class="n">Success</span><span class="p">(</span><span class="no">nil</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="query">Query</h2>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// query callback representing the query of a chaincode</span>
<span class="k">func</span> <span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">SimpleChaincode</span><span class="p">)</span> <span class="n">query</span><span class="p">(</span><span class="n">stub</span> <span class="n">shim</span><span class="o">.</span><span class="n">ChaincodeStubInterface</span><span class="p">,</span> <span class="n">args</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="n">pb</span><span class="o">.</span><span class="n">Response</span> <span class="p">{</span>
	<span class="k">var</span> <span class="n">A</span> <span class="kt">string</span> <span class="c">// Entities</span>
	<span class="k">var</span> <span class="n">err</span> <span class="kt">error</span>

	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">args</span><span class="p">)</span> <span class="o">!=</span> <span class="m">1</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">shim</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Incorrect number of arguments. Expecting name of the person to query"</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="n">A</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">]</span>

	<span class="c">// Get the state from the ledger</span>
	<span class="n">Avalbytes</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">stub</span><span class="o">.</span><span class="n">GetState</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">jsonResp</span> <span class="o">:=</span> <span class="s">"{</span><span class="se">\"</span><span class="s">Error</span><span class="se">\"</span><span class="s">:</span><span class="se">\"</span><span class="s">Failed to get state for "</span> <span class="o">+</span> <span class="n">A</span> <span class="o">+</span> <span class="s">"</span><span class="se">\"</span><span class="s">}"</span>
		<span class="k">return</span> <span class="n">shim</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="n">jsonResp</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="n">Avalbytes</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">jsonResp</span> <span class="o">:=</span> <span class="s">"{</span><span class="se">\"</span><span class="s">Error</span><span class="se">\"</span><span class="s">:</span><span class="se">\"</span><span class="s">Nil amount for "</span> <span class="o">+</span> <span class="n">A</span> <span class="o">+</span> <span class="s">"</span><span class="se">\"</span><span class="s">}"</span>
		<span class="k">return</span> <span class="n">shim</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="n">jsonResp</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="n">jsonResp</span> <span class="o">:=</span> <span class="s">"{</span><span class="se">\"</span><span class="s">Name</span><span class="se">\"</span><span class="s">:</span><span class="se">\"</span><span class="s">"</span> <span class="o">+</span> <span class="n">A</span> <span class="o">+</span> <span class="s">"</span><span class="se">\"</span><span class="s">,</span><span class="se">\"</span><span class="s">Amount</span><span class="se">\"</span><span class="s">:</span><span class="se">\"</span><span class="s">"</span> <span class="o">+</span> <span class="kt">string</span><span class="p">(</span><span class="n">Avalbytes</span><span class="p">)</span> <span class="o">+</span> <span class="s">"</span><span class="se">\"</span><span class="s">}"</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Query Response:%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">jsonResp</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">shim</span><span class="o">.</span><span class="n">Success</span><span class="p">(</span><span class="n">Avalbytes</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
:ET